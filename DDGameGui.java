package ddgame;
import TextIO.*;
import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.*;
import javax.tools.JavaCompiler;
import javax.tools.ToolProvider;
/**
 *
 * @author Joe
 */
public class DDGameGui extends javax.swing.JFrame {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/**
     * Creates new form DDGameGui
     */
    public DDGameGui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ddGameTabs = new javax.swing.JTabbedPane();
        charSheet = new javax.swing.JPanel();
        loadButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        SkillsLabel = new javax.swing.JLabel();
        SkillsDisplayPane = new javax.swing.JScrollPane();
        SkillsBox = new javax.swing.JTextArea();
        LanguagesKnownScroll = new javax.swing.JScrollPane();
        LanguagesKnown = new javax.swing.JTextArea();
        LanguagesLabel = new javax.swing.JLabel();
        LeftSideSuperPanel = new javax.swing.JPanel();
        SavesPanel = new javax.swing.JPanel();
        FortLabel = new javax.swing.JLabel();
        ReflexLabel = new javax.swing.JLabel();
        WillLabel = new javax.swing.JLabel();
        StatBox = new javax.swing.JPanel();
        STRLabel = new javax.swing.JLabel();
        StatLabel = new javax.swing.JLabel();
        DEXLabel = new javax.swing.JLabel();
        CONLabel = new javax.swing.JLabel();
        INTLabel = new javax.swing.JLabel();
        WISLabel = new javax.swing.JLabel();
        CHALabel = new javax.swing.JLabel();
        ACPanel = new javax.swing.JPanel();
        ACLabel = new javax.swing.JLabel();
        TouchACLabel = new javax.swing.JLabel();
        FlatFootedACLabel = new javax.swing.JLabel();
        WeightPanel = new javax.swing.JPanel();
        WeightLabel = new javax.swing.JLabel();
        LightLoadLabel = new javax.swing.JLabel();
        MediumLoadLabel = new javax.swing.JLabel();
        HeavyLoadLabel = new javax.swing.JLabel();
        TopMiddleSuperPanel = new javax.swing.JPanel();
        HPPanel = new javax.swing.JPanel();
        HPCurrentField = new javax.swing.JTextField();
        HPLabel = new javax.swing.JLabel();
        HPMaxLabel = new javax.swing.JLabel();
        AttacksPanel = new javax.swing.JPanel();
        BABLabel = new javax.swing.JLabel();
        MeleeAttackLabel = new javax.swing.JLabel();
        BullrushLabel = new javax.swing.JLabel();
        GrappleLabel = new javax.swing.JLabel();
        TripLabel = new javax.swing.JLabel();
        RangeAttackLabel = new javax.swing.JLabel();
        OverrunLabel = new javax.swing.JLabel();
        BasicsPanel = new javax.swing.JPanel();
        charNameLabel = new javax.swing.JLabel();
        GenderLabel = new javax.swing.JLabel();
        RaceLabel = new javax.swing.JLabel();
        ClassLabel = new javax.swing.JLabel();
        SpeedLabel = new javax.swing.JLabel();
        LevelPanel = new javax.swing.JPanel();
        LevelUpLabel = new javax.swing.JLabel();
        levelLabel = new javax.swing.JLabel();
        expLabel = new javax.swing.JLabel();
        AttackListScroller = new javax.swing.JScrollPane();
        AttacksPane = new javax.swing.JPanel();
        Att1Label = new javax.swing.JLabel();
        Att1Weapon = new javax.swing.JLabel();
        Att1DamageType = new javax.swing.JLabel();
        Att2Label = new javax.swing.JLabel();
        Att2Weapon = new javax.swing.JLabel();
        Att2DamageType = new javax.swing.JLabel();
        Att3Label = new javax.swing.JLabel();
        Att3Weapon = new javax.swing.JLabel();
        Att3DamageType = new javax.swing.JLabel();
        Att4Label = new javax.swing.JLabel();
        Att4Weapon = new javax.swing.JLabel();
        Att4DamageType = new javax.swing.JLabel();
        AbilitiesPanel = new javax.swing.JPanel();
        FeatsDisplayPane = new javax.swing.JScrollPane();
        FeatsBox = new javax.swing.JTextArea();
        FeatsLabel = new javax.swing.JLabel();
        spellSheet = new javax.swing.JPanel();
        editSheet = new javax.swing.JPanel();
        charNameInsertBoxLabel = new javax.swing.JLabel();
        charNameInsertBox = new javax.swing.JTextField();
        expInsertBoxLabel = new javax.swing.JLabel();
        expInsertBox = new javax.swing.JTextField();
        InsertStatBox = new javax.swing.JPanel();
        STRInsertBoxLabel = new javax.swing.JLabel();
        CONInsertBoxLabel = new javax.swing.JLabel();
        DEXInsertBoxLabel = new javax.swing.JLabel();
        INTInsertBoxLabel = new javax.swing.JLabel();
        WISInsertBoxLabel = new javax.swing.JLabel();
        CHAInsertBoxLabel = new javax.swing.JLabel();
        STRInsertBox = new javax.swing.JTextField();
        DEXInsertBox = new javax.swing.JTextField();
        CONInsertBox = new javax.swing.JTextField();
        INTInsertBox = new javax.swing.JTextField();
        WISInsertBox = new javax.swing.JTextField();
        CHAInsertBox = new javax.swing.JTextField();
        RaceSelector = new javax.swing.JComboBox();
        ClassSelectButton = new javax.swing.JButton();
        languageInsertLabel = new javax.swing.JLabel();
        LanguageInsertScroller = new javax.swing.JScrollPane();
        LanguageInsertArea = new javax.swing.JTextArea();
        GenderBox = new javax.swing.JComboBox();
        ClassAbilitiesScroller = new javax.swing.JScrollPane();
        ClassAbilitiesPanel = new javax.swing.JPanel();
        specialistWizardBox = new javax.swing.JPanel();
        SpecialistWizardLabel = new javax.swing.JLabel();
        SpecialtySelectBox = new javax.swing.JComboBox();
        SpecialtyLabel = new javax.swing.JLabel();
        BannedLabel1 = new javax.swing.JLabel();
        BannedLabel2 = new javax.swing.JLabel();
        BannedSchoolSelectBox1 = new javax.swing.JComboBox();
        BannedSchoolSelectBox2 = new javax.swing.JComboBox();
        rogueAbilitiesPanel = new javax.swing.JPanel();
        RogueAbilitiesLabel = new javax.swing.JLabel();
        rogueAbilities1 = new javax.swing.JCheckBox();
        rogueAbilities2 = new javax.swing.JCheckBox();
        rogueAbilities3 = new javax.swing.JCheckBox();
        rogueAbilities4 = new javax.swing.JCheckBox();
        rogueAbilities5 = new javax.swing.JCheckBox();
        rogueAbilities6 = new javax.swing.JCheckBox();
        rogueAbilities7 = new javax.swing.JCheckBox();
        rogueAbilities8 = new javax.swing.JCheckBox();
        rogueAbilities9 = new javax.swing.JCheckBox();
        rogueAbilities10 = new javax.swing.JCheckBox();
        CombatStylePanel = new javax.swing.JPanel();
        CombatStyleLabel = new javax.swing.JLabel();
        CombatStyleBox = new javax.swing.JComboBox();
        favoredEnemyPanel = new javax.swing.JPanel();
        favoredEnemyLabel = new javax.swing.JLabel();
        FELvl1Label = new javax.swing.JLabel();
        FELvl1Box = new javax.swing.JComboBox();
        FELvl5Box1 = new javax.swing.JComboBox();
        FELvl5Label = new javax.swing.JLabel();
        FELvl5Box2 = new javax.swing.JComboBox();
        FELvl10Label = new javax.swing.JLabel();
        FELvl10Box1 = new javax.swing.JComboBox();
        FELvl10Box2 = new javax.swing.JComboBox();
        FELvl15Label = new javax.swing.JLabel();
        FELvl20Label = new javax.swing.JLabel();
        FELvl15Box1 = new javax.swing.JComboBox();
        FELvl15Box2 = new javax.swing.JComboBox();
        FELvl20Box1 = new javax.swing.JComboBox();
        FELvl20Box2 = new javax.swing.JComboBox();
        monkBonusFeatsPanel = new javax.swing.JPanel();
        monkBonusFeatsLabel = new javax.swing.JLabel();
        monkBonusLvl1FeatBox = new javax.swing.JComboBox();
        monkBonusLvl1Label = new javax.swing.JLabel();
        monkBonusLvl2Label = new javax.swing.JLabel();
        monkBonusLvl6Label = new javax.swing.JLabel();
        monkBonusLvl2FeatBox = new javax.swing.JComboBox();
        monkBonusLvl6FeatBox = new javax.swing.JComboBox();
        domainSelectPanel = new javax.swing.JPanel();
        domainSelectLabel = new javax.swing.JLabel();
        domain1ComboBox = new javax.swing.JComboBox();
        domain2ComboBox = new javax.swing.JComboBox();
        domain3ComboBox = new javax.swing.JComboBox();
        domain4ComboBox = new javax.swing.JComboBox();
        domain5ComboBox = new javax.swing.JComboBox();
        domain6ComboBox = new javax.swing.JComboBox();
        SkillSheet = new javax.swing.JPanel();
        SkillInsertScrollPane = new javax.swing.JScrollPane();
        SkillInsertTable = new javax.swing.JTable() {
            public TableCellRenderer getCellRenderer(int row, int column) {
                inClassRenderer inClass = new inClassRenderer();
                nonClassRenderer nonClass = new nonClassRenderer();
                if (curChar.classSkillArray[row][column]) {
                    return inClass;
                }
                // else...
                return nonClass;
            }
        };
        CustomSkillButton = new javax.swing.JButton();
        featSheet = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        FeatsTable = new javax.swing.JTable();
        buffSheet = new javax.swing.JPanel();
        weaponsAndArmorSheet = new javax.swing.JPanel();
        ArmorPanel = new javax.swing.JPanel();
        ArmorInputLabel = new javax.swing.JLabel();
        ArmorEnhancementLabel = new javax.swing.JLabel();
        ArmorMaterialLabel = new javax.swing.JLabel();
        ArmorSelectBox = new javax.swing.JComboBox();
        ArmorEnhancementSelectBox = new javax.swing.JComboBox();
        ArmorMaterialSelectBox = new javax.swing.JComboBox();
        ArmorEnch1Label = new javax.swing.JLabel();
        ArmorEnch2Label = new javax.swing.JLabel();
        ArmorEnch3Label = new javax.swing.JLabel();
        ArmorEnch1SelectBox = new javax.swing.JComboBox();
        ArmorEnch2SelectBox = new javax.swing.JComboBox();
        ArmorEnch3SelectBox = new javax.swing.JComboBox();
        ArmorPriceLabel = new javax.swing.JLabel();
        ArmorPriceDisplayLabel = new javax.swing.JLabel();
        ArmorAttackLabel = new javax.swing.JLabel();
        ArmorAttackSelectBox = new javax.swing.JComboBox();
        WeaponPanel = new javax.swing.JPanel();
        WeaponInputLabel = new javax.swing.JLabel();
        WeaponEnhancementLabel = new javax.swing.JLabel();
        WeaponMaterialLabel = new javax.swing.JLabel();
        WeaponEnch1Label = new javax.swing.JLabel();
        WeaponEnch2Label = new javax.swing.JLabel();
        WeaponEnch3Label = new javax.swing.JLabel();
        WeaponSizeLabel = new javax.swing.JLabel();
        WeaponPriceLabel = new javax.swing.JLabel();
        WeaponSelectBox = new javax.swing.JComboBox();
        WeaponEnhancementSelectBox = new javax.swing.JComboBox();
        WeaponMaterialSelectBox = new javax.swing.JComboBox();
        WeaponSizeSelectBox = new javax.swing.JComboBox();
        WeaponEnch1SelectBox = new javax.swing.JComboBox();
        WeaponEnch2SelectBox = new javax.swing.JComboBox();
        WeaponEnch3SelectBox = new javax.swing.JComboBox();
        WeaponPriceDisplayLabel = new javax.swing.JLabel();
        ShieldPanel = new javax.swing.JPanel();
        ShieldLabel = new javax.swing.JLabel();
        ShieldEnhancementLabel = new javax.swing.JLabel();
        ShieldMaterialLabel = new javax.swing.JLabel();
        ShieldEnch1Label = new javax.swing.JLabel();
        ShieldEnch2Label = new javax.swing.JLabel();
        ShieldEnch3Label = new javax.swing.JLabel();
        ShieldPriceLabel = new javax.swing.JLabel();
        ShieldPriceDisplayLabel = new javax.swing.JLabel();
        ShieldSelectBox = new javax.swing.JComboBox();
        ShieldEnhancementSelectBox = new javax.swing.JComboBox();
        ShieldMaterialSelectBox = new javax.swing.JComboBox();
        ShieldEnch1SelectBox = new javax.swing.JComboBox();
        ShieldEnch2SelectBox = new javax.swing.JComboBox();
        ShieldEnch3SelectBox = new javax.swing.JComboBox();
        ShieldAttackLabel = new javax.swing.JLabel();
        ShieldAttackSelectBox = new javax.swing.JComboBox();
        WeaponPanel1 = new javax.swing.JPanel();
        WeaponInputLabel1 = new javax.swing.JLabel();
        WeaponEnhancementLabel1 = new javax.swing.JLabel();
        WeaponMaterialLabel1 = new javax.swing.JLabel();
        WeaponEnch1Label1 = new javax.swing.JLabel();
        WeaponEnch2Label1 = new javax.swing.JLabel();
        WeaponEnch3Label1 = new javax.swing.JLabel();
        WeaponSizeLabel1 = new javax.swing.JLabel();
        WeaponPriceLabel1 = new javax.swing.JLabel();
        WeaponSelectBox1 = new javax.swing.JComboBox();
        WeaponEnhancementSelectBox1 = new javax.swing.JComboBox();
        WeaponMaterialSelectBox1 = new javax.swing.JComboBox();
        WeaponSizeSelectBox1 = new javax.swing.JComboBox();
        WeaponEnch1SelectBox1 = new javax.swing.JComboBox();
        WeaponEnch2SelectBox1 = new javax.swing.JComboBox();
        WeaponEnch3SelectBox1 = new javax.swing.JComboBox();
        WeaponPriceDisplayLabel1 = new javax.swing.JLabel();
        WeaponPanel2 = new javax.swing.JPanel();
        WeaponInputLabel2 = new javax.swing.JLabel();
        WeaponEnhancementLabel2 = new javax.swing.JLabel();
        WeaponMaterialLabel2 = new javax.swing.JLabel();
        WeaponEnch1Label2 = new javax.swing.JLabel();
        WeaponEnch2Label2 = new javax.swing.JLabel();
        WeaponEnch3Label2 = new javax.swing.JLabel();
        WeaponSizeLabel2 = new javax.swing.JLabel();
        WeaponPriceLabel2 = new javax.swing.JLabel();
        WeaponSelectBox2 = new javax.swing.JComboBox();
        WeaponEnhancementSelectBox2 = new javax.swing.JComboBox();
        WeaponMaterialSelectBox2 = new javax.swing.JComboBox();
        WeaponSizeSelectBox2 = new javax.swing.JComboBox();
        WeaponEnch1SelectBox2 = new javax.swing.JComboBox();
        WeaponEnch2SelectBox2 = new javax.swing.JComboBox();
        WeaponEnch3SelectBox2 = new javax.swing.JComboBox();
        WeaponPriceDisplayLabel2 = new javax.swing.JLabel();
        WeaponPanel3 = new javax.swing.JPanel();
        WeaponInputLabel3 = new javax.swing.JLabel();
        WeaponEnhancementLabel3 = new javax.swing.JLabel();
        WeaponMaterialLabel3 = new javax.swing.JLabel();
        WeaponEnch1Label3 = new javax.swing.JLabel();
        WeaponEnch2Label3 = new javax.swing.JLabel();
        WeaponEnch3Label3 = new javax.swing.JLabel();
        WeaponSizeLabel3 = new javax.swing.JLabel();
        WeaponPriceLabel3 = new javax.swing.JLabel();
        WeaponSelectBox3 = new javax.swing.JComboBox();
        WeaponEnhancementSelectBox3 = new javax.swing.JComboBox();
        WeaponMaterialSelectBox3 = new javax.swing.JComboBox();
        WeaponSizeSelectBox3 = new javax.swing.JComboBox();
        WeaponEnch1SelectBox3 = new javax.swing.JComboBox();
        WeaponEnch2SelectBox3 = new javax.swing.JComboBox();
        WeaponEnch3SelectBox3 = new javax.swing.JComboBox();
        WeaponPriceDisplayLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ItemTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Dungeons and Dragons");
        setPreferredSize(new java.awt.Dimension(900, 560));
        setResizable(false);

        ddGameTabs.setMinimumSize(new java.awt.Dimension(0, 0));
        ddGameTabs.setPreferredSize(new java.awt.Dimension(900, 628));
        ddGameTabs.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                ddGameTabsMouseMoved(evt);
            }
        });

        charSheet.setMaximumSize(new java.awt.Dimension(810, 600));
        charSheet.setMinimumSize(new java.awt.Dimension(0, 0));
        charSheet.setPreferredSize(new java.awt.Dimension(900, 600));

        loadButton.setText("Load");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        SkillsLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        SkillsLabel.setText("Skills:");

        SkillsBox.setEditable(false);
        SkillsBox.setBackground(new java.awt.Color(240, 240, 240));
        SkillsBox.setColumns(20);
        SkillsBox.setFont(new java.awt.Font("Times New Roman", 0, 10)); // NOI18N
        SkillsBox.setRows(5);
        SkillsBox.setText("Appraise:\nBalance:\nBluff:\nClimb:\nConcentration:\nCraft 1:\nCraft 2:\nCraft 3:\nCraft 4:\nCraft 5:\nCraft 6:\nCraft 7:\nDecipher Script:\nDiplomacy:\nDisable Device:\nDisguise:\nEscape Artist:\nForgery:\nGather Information:\nHandle Animal:\nHeal:\nHide:\nIntimidate:\nJump:\nKnowledge(arcana):\nKnowledge(arch/eng):\nKnowledge(dungeoneering):\nKnowledge(geography):\nKnowledge(history):\nKnowledge(local):\nKnowledge(nature):\nKnowledge(nobility):\nKnowledge(religion):\nKnowledge(planes):\nKnowledge 1:\nKnowledge 2:\nKnowledge 3:\nKnowledge 4:\nKnowledge 5:\nKnowledge 6:\nKnowledge 7:\nKnowledge 8:\nListen:\nMoveSilently:\nOpen Lock:\nPerform 1:\nPerform 2:\nPerform 3:\nPerform 4:\nPerform 5:\nPerform 6:\nProfession 1:\nProfession 2:\nProfession 3:\nProfession 4:\nProfession 5:\nProfession 6:\nRide:\nSearch:\nSense Motive:\nSlight of Hand:\nSpeak Language:\nSpellcraft\nSpot:\nSurvival:\nSwim:\nTumble:\nUse Magic Device:\nUse Rope:");
        SkillsDisplayPane.setViewportView(SkillsBox);

        LanguagesKnown.setEditable(false);
        LanguagesKnown.setBackground(new java.awt.Color(240, 240, 240));
        LanguagesKnown.setColumns(20);
        LanguagesKnown.setRows(5);
        LanguagesKnownScroll.setViewportView(LanguagesKnown);

        LanguagesLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        LanguagesLabel.setText("Languages");

        FortLabel.setText("Fortitiude:");

        ReflexLabel.setText("Reflex:");

        WillLabel.setText("Will:");

        javax.swing.GroupLayout SavesPanelLayout = new javax.swing.GroupLayout(SavesPanel);
        SavesPanel.setLayout(SavesPanelLayout);
        SavesPanelLayout.setHorizontalGroup(
            SavesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SavesPanelLayout.createSequentialGroup()
                .addGroup(SavesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FortLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ReflexLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WillLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 30, Short.MAX_VALUE))
        );
        SavesPanelLayout.setVerticalGroup(
            SavesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SavesPanelLayout.createSequentialGroup()
                .addComponent(FortLabel)
                .addGap(5, 5, 5)
                .addComponent(ReflexLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(WillLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        STRLabel.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        STRLabel.setText("STR:");

        StatLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        StatLabel.setText("Abilities");

        DEXLabel.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        DEXLabel.setText("DEX:");

        CONLabel.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        CONLabel.setText("CON:");

        INTLabel.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        INTLabel.setText("INT:");

        WISLabel.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        WISLabel.setText("WIS:");

        CHALabel.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        CHALabel.setText("CHA:");

        javax.swing.GroupLayout StatBoxLayout = new javax.swing.GroupLayout(StatBox);
        StatBox.setLayout(StatBoxLayout);
        StatBoxLayout.setHorizontalGroup(
            StatBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(CHALabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(WISLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(INTLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(CONLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(DEXLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(STRLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(StatLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );
        StatBoxLayout.setVerticalGroup(
            StatBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StatBoxLayout.createSequentialGroup()
                .addComponent(StatLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(STRLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DEXLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CONLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(INTLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(WISLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CHALabel))
        );

        ACLabel.setText("AC:");

        TouchACLabel.setText("Touch AC:");

        FlatFootedACLabel.setText("Flat-Footed AC:");

        javax.swing.GroupLayout ACPanelLayout = new javax.swing.GroupLayout(ACPanel);
        ACPanel.setLayout(ACPanelLayout);
        ACPanelLayout.setHorizontalGroup(
            ACPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ACLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(TouchACLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(FlatFootedACLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );
        ACPanelLayout.setVerticalGroup(
            ACPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ACPanelLayout.createSequentialGroup()
                .addComponent(ACLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TouchACLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FlatFootedACLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        WeightLabel.setText("Weight: ");

        LightLoadLabel.setText("Light Load: ");

        MediumLoadLabel.setText("Medium Load:");

        HeavyLoadLabel.setText("Heavy Load:");

        javax.swing.GroupLayout WeightPanelLayout = new javax.swing.GroupLayout(WeightPanel);
        WeightPanel.setLayout(WeightPanelLayout);
        WeightPanelLayout.setHorizontalGroup(
            WeightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WeightPanelLayout.createSequentialGroup()
                .addGroup(WeightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(WeightLabel)
                    .addComponent(LightLoadLabel)
                    .addComponent(MediumLoadLabel)
                    .addComponent(HeavyLoadLabel))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        WeightPanelLayout.setVerticalGroup(
            WeightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WeightPanelLayout.createSequentialGroup()
                .addComponent(WeightLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LightLoadLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MediumLoadLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(HeavyLoadLabel)
                .addGap(0, 15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout LeftSideSuperPanelLayout = new javax.swing.GroupLayout(LeftSideSuperPanel);
        LeftSideSuperPanel.setLayout(LeftSideSuperPanelLayout);
        LeftSideSuperPanelLayout.setHorizontalGroup(
            LeftSideSuperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LeftSideSuperPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(LeftSideSuperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ACPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SavesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(StatBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(WeightPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        LeftSideSuperPanelLayout.setVerticalGroup(
            LeftSideSuperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LeftSideSuperPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(StatBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ACPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SavesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(WeightPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        HPCurrentField.setText("0");

        HPLabel.setText("HP:");

        HPMaxLabel.setText("/");

        javax.swing.GroupLayout HPPanelLayout = new javax.swing.GroupLayout(HPPanel);
        HPPanel.setLayout(HPPanelLayout);
        HPPanelLayout.setHorizontalGroup(
            HPPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HPPanelLayout.createSequentialGroup()
                .addComponent(HPLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(HPCurrentField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(HPMaxLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        HPPanelLayout.setVerticalGroup(
            HPPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HPPanelLayout.createSequentialGroup()
                .addGroup(HPPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HPLabel)
                    .addComponent(HPCurrentField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HPMaxLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        BABLabel.setText("BAB:");

        MeleeAttackLabel.setText("Melee Att:");

        BullrushLabel.setText("Bullrush A/D:");

        GrappleLabel.setText("Grapple:");

        TripLabel.setText("Trip A/D:");

        RangeAttackLabel.setText("Range Att:");

        OverrunLabel.setText("Overrun A/D:");

        javax.swing.GroupLayout AttacksPanelLayout = new javax.swing.GroupLayout(AttacksPanel);
        AttacksPanel.setLayout(AttacksPanelLayout);
        AttacksPanelLayout.setHorizontalGroup(
            AttacksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MeleeAttackLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(AttacksPanelLayout.createSequentialGroup()
                .addGroup(AttacksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RangeAttackLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BABLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GrappleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(AttacksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(BullrushLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(TripLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(OverrunLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        AttacksPanelLayout.setVerticalGroup(
            AttacksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AttacksPanelLayout.createSequentialGroup()
                .addComponent(BABLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MeleeAttackLabel)
                .addGap(5, 5, 5)
                .addComponent(RangeAttackLabel)
                .addGap(6, 6, 6)
                .addComponent(GrappleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TripLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OverrunLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BullrushLabel)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        charNameLabel.setFont(new java.awt.Font("Traditional Arabic", 1, 18)); // NOI18N
        charNameLabel.setText("Name:");
        charNameLabel.setToolTipText("Character Name");

        GenderLabel.setText("Gender:");

        RaceLabel.setText("Race:");

        ClassLabel.setText("Class:");

        SpeedLabel.setText("Speed:");

        javax.swing.GroupLayout BasicsPanelLayout = new javax.swing.GroupLayout(BasicsPanel);
        BasicsPanel.setLayout(BasicsPanelLayout);
        BasicsPanelLayout.setHorizontalGroup(
            BasicsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BasicsPanelLayout.createSequentialGroup()
                .addComponent(charNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(BasicsPanelLayout.createSequentialGroup()
                .addGroup(BasicsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ClassLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(BasicsPanelLayout.createSequentialGroup()
                        .addGroup(BasicsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(BasicsPanelLayout.createSequentialGroup()
                                .addComponent(RaceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(GenderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(SpeedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        BasicsPanelLayout.setVerticalGroup(
            BasicsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BasicsPanelLayout.createSequentialGroup()
                .addComponent(charNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BasicsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RaceLabel)
                    .addComponent(GenderLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ClassLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SpeedLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        LevelUpLabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        LevelUpLabel.setForeground(new java.awt.Color(0, 0, 204));
        LevelUpLabel.setText("Level Up!!");

        levelLabel.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        levelLabel.setText("Character Level: ");

        expLabel.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        expLabel.setText("Experience:");

        javax.swing.GroupLayout LevelPanelLayout = new javax.swing.GroupLayout(LevelPanel);
        LevelPanel.setLayout(LevelPanelLayout);
        LevelPanelLayout.setHorizontalGroup(
            LevelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LevelPanelLayout.createSequentialGroup()
                .addGroup(LevelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(levelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LevelUpLabel)
                    .addComponent(expLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        LevelPanelLayout.setVerticalGroup(
            LevelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LevelPanelLayout.createSequentialGroup()
                .addComponent(levelLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(expLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LevelUpLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 25, Short.MAX_VALUE))
        );

        Att1Label.setText("Attack 1:");

        Att1Weapon.setText("none");

        Att1DamageType.setText("Bludgeoning");

        Att2Label.setText("Attack 2:");

        Att2Weapon.setText("none");

        Att2DamageType.setText("Bludgeoning");

        Att3Label.setText("Attack 3:");

        Att3Weapon.setText("none");

        Att3DamageType.setText("Bludgeoning");

        Att4Label.setText("Attack 4:");

        Att4Weapon.setText("none");

        Att4DamageType.setText("Bludgeoning");

        javax.swing.GroupLayout AttacksPaneLayout = new javax.swing.GroupLayout(AttacksPane);
        AttacksPane.setLayout(AttacksPaneLayout);
        AttacksPaneLayout.setHorizontalGroup(
            AttacksPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AttacksPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AttacksPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Att1Weapon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Att1DamageType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Att1Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Att2Weapon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Att2DamageType, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                    .addComponent(Att2Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Att3Weapon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Att3DamageType, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                    .addComponent(Att3Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Att4Weapon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Att4DamageType, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                    .addComponent(Att4Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        AttacksPaneLayout.setVerticalGroup(
            AttacksPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AttacksPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Att1Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Att1Weapon)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Att1DamageType)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Att2Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Att2Weapon)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Att2DamageType)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Att3Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Att3Weapon)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Att3DamageType)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Att4Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Att4Weapon)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Att4DamageType)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        AttackListScroller.setViewportView(AttacksPane);

        javax.swing.GroupLayout TopMiddleSuperPanelLayout = new javax.swing.GroupLayout(TopMiddleSuperPanel);
        TopMiddleSuperPanel.setLayout(TopMiddleSuperPanelLayout);
        TopMiddleSuperPanelLayout.setHorizontalGroup(
            TopMiddleSuperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TopMiddleSuperPanelLayout.createSequentialGroup()
                .addComponent(BasicsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(LevelPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(TopMiddleSuperPanelLayout.createSequentialGroup()
                .addComponent(AttacksPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TopMiddleSuperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TopMiddleSuperPanelLayout.createSequentialGroup()
                        .addComponent(HPPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(126, 146, Short.MAX_VALUE))
                    .addGroup(TopMiddleSuperPanelLayout.createSequentialGroup()
                        .addComponent(AttackListScroller)
                        .addContainerGap())))
        );
        TopMiddleSuperPanelLayout.setVerticalGroup(
            TopMiddleSuperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TopMiddleSuperPanelLayout.createSequentialGroup()
                .addComponent(LevelPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(TopMiddleSuperPanelLayout.createSequentialGroup()
                .addComponent(BasicsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(TopMiddleSuperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(TopMiddleSuperPanelLayout.createSequentialGroup()
                        .addComponent(HPPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(AttackListScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(TopMiddleSuperPanelLayout.createSequentialGroup()
                        .addComponent(AttacksPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1))))
        );

        FeatsBox.setEditable(false);
        FeatsBox.setBackground(new java.awt.Color(240, 240, 240));
        FeatsBox.setColumns(20);
        FeatsBox.setRows(5);
        FeatsDisplayPane.setViewportView(FeatsBox);

        FeatsLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        FeatsLabel.setText("Abilities");
        FeatsLabel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        javax.swing.GroupLayout AbilitiesPanelLayout = new javax.swing.GroupLayout(AbilitiesPanel);
        AbilitiesPanel.setLayout(AbilitiesPanelLayout);
        AbilitiesPanelLayout.setHorizontalGroup(
            AbilitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(FeatsLabel)
            .addComponent(FeatsDisplayPane, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        AbilitiesPanelLayout.setVerticalGroup(
            AbilitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AbilitiesPanelLayout.createSequentialGroup()
                .addComponent(FeatsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(FeatsDisplayPane, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout charSheetLayout = new javax.swing.GroupLayout(charSheet);
        charSheet.setLayout(charSheetLayout);
        charSheetLayout.setHorizontalGroup(
            charSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(charSheetLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(charSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(charSheetLayout.createSequentialGroup()
                        .addComponent(loadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton))
                    .addComponent(LeftSideSuperPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(charSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TopMiddleSuperPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(charSheetLayout.createSequentialGroup()
                        .addComponent(AbilitiesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(charSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LanguagesLabel)
                            .addComponent(LanguagesKnownScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(charSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(charSheetLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(SkillsLabel)
                        .addContainerGap(247, Short.MAX_VALUE))
                    .addGroup(charSheetLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SkillsDisplayPane, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(47, Short.MAX_VALUE))))
        );
        charSheetLayout.setVerticalGroup(
            charSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(charSheetLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(charSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(charSheetLayout.createSequentialGroup()
                        .addGroup(charSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                            .addComponent(loadButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LeftSideSuperPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(charSheetLayout.createSequentialGroup()
                        .addComponent(SkillsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SkillsDisplayPane, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(charSheetLayout.createSequentialGroup()
                        .addComponent(TopMiddleSuperPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(charSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(charSheetLayout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(LanguagesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(LanguagesKnownScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(AbilitiesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ddGameTabs.addTab("Character Sheet", charSheet);

        spellSheet.setPreferredSize(new java.awt.Dimension(900, 532));

        javax.swing.GroupLayout spellSheetLayout = new javax.swing.GroupLayout(spellSheet);
        spellSheet.setLayout(spellSheetLayout);
        spellSheetLayout.setHorizontalGroup(
            spellSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 805, Short.MAX_VALUE)
        );
        spellSheetLayout.setVerticalGroup(
            spellSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 532, Short.MAX_VALUE)
        );

        ddGameTabs.addTab("Spell Sheet", spellSheet);

        editSheet.setPreferredSize(new java.awt.Dimension(900, 600));
        editSheet.setRequestFocusEnabled(false);

        charNameInsertBoxLabel.setText("Character Name");

        expInsertBoxLabel.setText("Experience:");

        expInsertBox.setText("0");

        InsertStatBox.setBackground(new java.awt.Color(250, 250, 250));

        STRInsertBoxLabel.setText("STR:");

        CONInsertBoxLabel.setText("CON:");

        DEXInsertBoxLabel.setText("DEX:");

        INTInsertBoxLabel.setText("INT:");

        WISInsertBoxLabel.setText("WIS:");

        CHAInsertBoxLabel.setText("CHA:");

        STRInsertBox.setText("0");

        DEXInsertBox.setText("0");

        CONInsertBox.setText("0");

        INTInsertBox.setText("0");

        WISInsertBox.setText("0");

        CHAInsertBox.setText("0");

        javax.swing.GroupLayout InsertStatBoxLayout = new javax.swing.GroupLayout(InsertStatBox);
        InsertStatBox.setLayout(InsertStatBoxLayout);
        InsertStatBoxLayout.setHorizontalGroup(
            InsertStatBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InsertStatBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InsertStatBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(InsertStatBoxLayout.createSequentialGroup()
                        .addComponent(CHAInsertBoxLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CHAInsertBox))
                    .addGroup(InsertStatBoxLayout.createSequentialGroup()
                        .addComponent(INTInsertBoxLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(INTInsertBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(InsertStatBoxLayout.createSequentialGroup()
                        .addComponent(STRInsertBoxLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(STRInsertBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(InsertStatBoxLayout.createSequentialGroup()
                        .addComponent(DEXInsertBoxLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DEXInsertBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(InsertStatBoxLayout.createSequentialGroup()
                        .addGroup(InsertStatBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(WISInsertBoxLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CONInsertBoxLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(InsertStatBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(CONInsertBox, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                            .addComponent(WISInsertBox))))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        InsertStatBoxLayout.setVerticalGroup(
            InsertStatBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InsertStatBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InsertStatBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(STRInsertBoxLabel)
                    .addComponent(STRInsertBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InsertStatBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DEXInsertBoxLabel)
                    .addComponent(DEXInsertBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InsertStatBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CONInsertBoxLabel)
                    .addComponent(CONInsertBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InsertStatBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(INTInsertBoxLabel)
                    .addComponent(INTInsertBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InsertStatBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WISInsertBoxLabel)
                    .addComponent(WISInsertBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InsertStatBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CHAInsertBoxLabel)
                    .addComponent(CHAInsertBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        RaceSelector.setModel(raceNamesList);

        ClassSelectButton.setText("Select Class Levels");
        ClassSelectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClassSelectButtonActionPerformed(evt);
            }
        });

        languageInsertLabel.setText("Insert Languages Known");

        LanguageInsertArea.setColumns(20);
        LanguageInsertArea.setRows(5);
        LanguageInsertArea.setText("Common");
        LanguageInsertScroller.setViewportView(LanguageInsertArea);

        GenderBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Male", "Female" }));

        SpecialistWizardLabel.setText("Specialist Wizards");

        SpecialtySelectBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Generalist", "Abjurer", "Conjurer", "Diviner", "Enchanter", "Evoker", "Illusionist", "Necromancer", "Transmuter" }));

        SpecialtyLabel.setText("Specialty");

        BannedLabel1.setText("Banned");

        BannedLabel2.setText("Banned");

        BannedSchoolSelectBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Abjuration", "Conjuration", "Enchantment", "Evocation", "Illusion", "Necromancy", "Transmutation" }));

        BannedSchoolSelectBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Abjuration", "Conjuration", "Enchantment", "Evocation", "Illusion", "Necromancy", "Transmutation" }));

        javax.swing.GroupLayout specialistWizardBoxLayout = new javax.swing.GroupLayout(specialistWizardBox);
        specialistWizardBox.setLayout(specialistWizardBoxLayout);
        specialistWizardBoxLayout.setHorizontalGroup(
            specialistWizardBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(specialistWizardBoxLayout.createSequentialGroup()
                .addComponent(SpecialtyLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SpecialtySelectBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(specialistWizardBoxLayout.createSequentialGroup()
                .addComponent(SpecialistWizardLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(specialistWizardBoxLayout.createSequentialGroup()
                .addComponent(BannedLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BannedSchoolSelectBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(specialistWizardBoxLayout.createSequentialGroup()
                .addComponent(BannedLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BannedSchoolSelectBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        specialistWizardBoxLayout.setVerticalGroup(
            specialistWizardBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(specialistWizardBoxLayout.createSequentialGroup()
                .addComponent(SpecialistWizardLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(specialistWizardBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SpecialtySelectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SpecialtyLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(specialistWizardBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BannedLabel1)
                    .addComponent(BannedSchoolSelectBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(specialistWizardBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BannedLabel2)
                    .addComponent(BannedSchoolSelectBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        RogueAbilitiesLabel.setText("Pick Rogue Special Abilities");

        rogueAbilities1.setText("Crippling Strike");

        rogueAbilities2.setText("Defensive Roll");

        rogueAbilities3.setText("Improved Evasion");

        rogueAbilities4.setText("Opportunist");

        rogueAbilities5.setText("Skill Mastery");

        rogueAbilities6.setText("Slippery Mind");

        rogueAbilities7.setText("Bonus Feat");

        rogueAbilities8.setText("Bonus Feat");

        rogueAbilities9.setText("Bonus Feat");

        rogueAbilities10.setText("Bonus Feat");

        javax.swing.GroupLayout rogueAbilitiesPanelLayout = new javax.swing.GroupLayout(rogueAbilitiesPanel);
        rogueAbilitiesPanel.setLayout(rogueAbilitiesPanelLayout);
        rogueAbilitiesPanelLayout.setHorizontalGroup(
            rogueAbilitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rogueAbilitiesPanelLayout.createSequentialGroup()
                .addComponent(RogueAbilitiesLabel)
                .addGap(0, 3, Short.MAX_VALUE))
            .addGroup(rogueAbilitiesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rogueAbilitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rogueAbilities1)
                    .addComponent(rogueAbilities2)
                    .addComponent(rogueAbilities3)
                    .addComponent(rogueAbilities4)
                    .addComponent(rogueAbilities5)
                    .addComponent(rogueAbilities6)
                    .addComponent(rogueAbilities7)
                    .addComponent(rogueAbilities8)
                    .addComponent(rogueAbilities9)
                    .addComponent(rogueAbilities10))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        rogueAbilitiesPanelLayout.setVerticalGroup(
            rogueAbilitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rogueAbilitiesPanelLayout.createSequentialGroup()
                .addComponent(RogueAbilitiesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rogueAbilities1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rogueAbilities2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rogueAbilities3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rogueAbilities4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rogueAbilities5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rogueAbilities6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rogueAbilities7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rogueAbilities8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rogueAbilities9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rogueAbilities10))
        );

        CombatStyleLabel.setText("Select Combat Style");

        CombatStyleBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Two-Weapon Fighting", "Archery" }));

        javax.swing.GroupLayout CombatStylePanelLayout = new javax.swing.GroupLayout(CombatStylePanel);
        CombatStylePanel.setLayout(CombatStylePanelLayout);
        CombatStylePanelLayout.setHorizontalGroup(
            CombatStylePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CombatStylePanelLayout.createSequentialGroup()
                .addGroup(CombatStylePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CombatStyleLabel)
                    .addComponent(CombatStyleBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        CombatStylePanelLayout.setVerticalGroup(
            CombatStylePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CombatStylePanelLayout.createSequentialGroup()
                .addComponent(CombatStyleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CombatStyleBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        favoredEnemyLabel.setText("Select Favored Enemies");

        FELvl1Label.setText("Lvl 1");

        FELvl1Box.setModel(favoredEnemyList1);

        FELvl5Box1.setModel(favoredEnemyList2);

        FELvl5Label.setText("Lvl 5");

        FELvl5Box2.setModel(favoredEnemyList2b);

        FELvl10Label.setText("Lvl 10");

        FELvl10Box1.setModel(favoredEnemyList3);

        FELvl10Box2.setModel(favoredEnemyList3b);

        FELvl15Label.setText("Lvl 15");

        FELvl20Label.setText("Lvl 20");

        FELvl15Box1.setModel(favoredEnemyList4);

        FELvl15Box2.setModel(favoredEnemyList4b);

        FELvl20Box1.setModel(favoredEnemyList5);

        FELvl20Box2.setModel(favoredEnemyList5b);

        javax.swing.GroupLayout favoredEnemyPanelLayout = new javax.swing.GroupLayout(favoredEnemyPanel);
        favoredEnemyPanel.setLayout(favoredEnemyPanelLayout);
        favoredEnemyPanelLayout.setHorizontalGroup(
            favoredEnemyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(favoredEnemyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(favoredEnemyLabel)
                .addContainerGap(92, Short.MAX_VALUE))
            .addGroup(favoredEnemyPanelLayout.createSequentialGroup()
                .addGroup(favoredEnemyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(FELvl1Label, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(FELvl5Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(favoredEnemyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(FELvl5Box1, 0, 83, Short.MAX_VALUE)
                    .addComponent(FELvl1Box, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FELvl5Box2, 0, 1, Short.MAX_VALUE))
            .addGroup(favoredEnemyPanelLayout.createSequentialGroup()
                .addGroup(favoredEnemyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(favoredEnemyPanelLayout.createSequentialGroup()
                        .addComponent(FELvl20Label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FELvl20Box1, 0, 83, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, favoredEnemyPanelLayout.createSequentialGroup()
                        .addGroup(favoredEnemyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(FELvl15Label)
                            .addComponent(FELvl10Label))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(favoredEnemyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(FELvl15Box1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(FELvl10Box1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(favoredEnemyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FELvl10Box2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(FELvl15Box2, 0, 1, Short.MAX_VALUE)
                    .addComponent(FELvl20Box2, 0, 1, Short.MAX_VALUE)))
        );
        favoredEnemyPanelLayout.setVerticalGroup(
            favoredEnemyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(favoredEnemyPanelLayout.createSequentialGroup()
                .addComponent(favoredEnemyLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(favoredEnemyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FELvl1Label)
                    .addComponent(FELvl1Box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(favoredEnemyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FELvl5Box1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FELvl5Label)
                    .addComponent(FELvl5Box2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(favoredEnemyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FELvl10Label)
                    .addComponent(FELvl10Box1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FELvl10Box2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(favoredEnemyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FELvl15Label)
                    .addComponent(FELvl15Box1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FELvl15Box2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(favoredEnemyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FELvl20Label)
                    .addComponent(FELvl20Box1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FELvl20Box2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 9, Short.MAX_VALUE))
        );

        monkBonusFeatsLabel.setText("Select Monk Bonus Feats");

        monkBonusLvl1FeatBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Stunning Fist", "Improved Grapple" }));

        monkBonusLvl1Label.setText("Lvl 1");

        monkBonusLvl2Label.setText("Lvl 2");

        monkBonusLvl6Label.setText("Lvl 6");

        monkBonusLvl2FeatBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Combat Reflexes", "Deflect Arrows" }));

        monkBonusLvl6FeatBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Improved Disarm", "Improved Trip" }));

        javax.swing.GroupLayout monkBonusFeatsPanelLayout = new javax.swing.GroupLayout(monkBonusFeatsPanel);
        monkBonusFeatsPanel.setLayout(monkBonusFeatsPanelLayout);
        monkBonusFeatsPanelLayout.setHorizontalGroup(
            monkBonusFeatsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(monkBonusFeatsPanelLayout.createSequentialGroup()
                .addGroup(monkBonusFeatsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, monkBonusFeatsPanelLayout.createSequentialGroup()
                        .addComponent(monkBonusLvl1Label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(monkBonusLvl1FeatBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(monkBonusFeatsLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(monkBonusFeatsPanelLayout.createSequentialGroup()
                        .addComponent(monkBonusLvl2Label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(monkBonusLvl2FeatBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(monkBonusFeatsPanelLayout.createSequentialGroup()
                        .addComponent(monkBonusLvl6Label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(monkBonusLvl6FeatBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(0, 7, Short.MAX_VALUE))
        );
        monkBonusFeatsPanelLayout.setVerticalGroup(
            monkBonusFeatsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(monkBonusFeatsPanelLayout.createSequentialGroup()
                .addComponent(monkBonusFeatsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(monkBonusFeatsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(monkBonusLvl1FeatBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(monkBonusLvl1Label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(monkBonusFeatsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(monkBonusLvl2Label)
                    .addComponent(monkBonusLvl2FeatBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(monkBonusFeatsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(monkBonusLvl6Label)
                    .addComponent(monkBonusLvl6FeatBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        domainSelectLabel.setText("Pick Domains");

        domain1ComboBox.setModel(domainNamesList);

        domain2ComboBox.setModel(domainNamesList);

        domain3ComboBox.setModel(domainNamesList);

        domain4ComboBox.setModel(domainNamesList);

        domain5ComboBox.setModel(domainNamesList);

        domain6ComboBox.setModel(domainNamesList);

        javax.swing.GroupLayout domainSelectPanelLayout = new javax.swing.GroupLayout(domainSelectPanel);
        domainSelectPanel.setLayout(domainSelectPanelLayout);
        domainSelectPanelLayout.setHorizontalGroup(
            domainSelectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(domainSelectPanelLayout.createSequentialGroup()
                .addComponent(domainSelectLabel)
                .addGap(0, 59, Short.MAX_VALUE))
            .addComponent(domain6ComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(domain5ComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(domain4ComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(domain3ComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(domain2ComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(domain1ComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        domainSelectPanelLayout.setVerticalGroup(
            domainSelectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(domainSelectPanelLayout.createSequentialGroup()
                .addComponent(domainSelectLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(domain1ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(domain2ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(domain3ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(domain4ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(domain5ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(domain6ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout ClassAbilitiesPanelLayout = new javax.swing.GroupLayout(ClassAbilitiesPanel);
        ClassAbilitiesPanel.setLayout(ClassAbilitiesPanelLayout);
        ClassAbilitiesPanelLayout.setHorizontalGroup(
            ClassAbilitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ClassAbilitiesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ClassAbilitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ClassAbilitiesPanelLayout.createSequentialGroup()
                        .addComponent(domainSelectPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(specialistWizardBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rogueAbilitiesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ClassAbilitiesPanelLayout.createSequentialGroup()
                        .addGroup(ClassAbilitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(monkBonusFeatsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CombatStylePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(favoredEnemyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(267, Short.MAX_VALUE))
        );
        ClassAbilitiesPanelLayout.setVerticalGroup(
            ClassAbilitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ClassAbilitiesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ClassAbilitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(specialistWizardBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(domainSelectPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rogueAbilitiesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ClassAbilitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ClassAbilitiesPanelLayout.createSequentialGroup()
                        .addComponent(CombatStylePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(monkBonusFeatsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(favoredEnemyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 63, Short.MAX_VALUE))
        );

        ClassAbilitiesScroller.setViewportView(ClassAbilitiesPanel);

        javax.swing.GroupLayout editSheetLayout = new javax.swing.GroupLayout(editSheet);
        editSheet.setLayout(editSheetLayout);
        editSheetLayout.setHorizontalGroup(
            editSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editSheetLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(editSheetLayout.createSequentialGroup()
                        .addComponent(charNameInsertBoxLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(charNameInsertBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(editSheetLayout.createSequentialGroup()
                        .addGroup(editSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(InsertStatBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(editSheetLayout.createSequentialGroup()
                                .addComponent(expInsertBoxLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(expInsertBox, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(editSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RaceSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ClassSelectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(GenderBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ClassAbilitiesScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(languageInsertLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LanguageInsertScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        editSheetLayout.setVerticalGroup(
            editSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editSheetLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(editSheetLayout.createSequentialGroup()
                        .addGroup(editSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(charNameInsertBoxLabel)
                            .addComponent(charNameInsertBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(languageInsertLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(editSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(editSheetLayout.createSequentialGroup()
                                .addGroup(editSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(expInsertBoxLabel)
                                    .addComponent(expInsertBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(GenderBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(editSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(InsertStatBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(editSheetLayout.createSequentialGroup()
                                        .addComponent(RaceSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ClassSelectButton))))
                            .addComponent(LanguageInsertScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(ClassAbilitiesScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(161, Short.MAX_VALUE))
        );

        ddGameTabs.addTab("Edit Character", editSheet);

        SkillSheet.setPreferredSize(new java.awt.Dimension(900, 532));

        SkillInsertTable.setAutoCreateRowSorter(true);
        SkillInsertTable.setModel(new DDGameGui.SkillTableModel(curChar.skillNames.size(),21)
        );
        for(int x=0;x<curChar.skillNames.size();x++) {
            SkillInsertTable.getModel().setValueAt(curChar.skillNames.get(x), x, 0);
        }
        SkillInsertTable.getColumnModel().getColumn(0).setHeaderValue("Skill");
        for(int x=1;x<SkillInsertTable.getColumnCount();x++) {
            SkillInsertTable.getColumnModel().getColumn(x).setHeaderValue(x);
            for(int y=0;y<SkillInsertTable.getRowCount();y++) {
                SkillInsertTable.getModel().setValueAt(new Integer(0),y,x);
            }
        }
        SkillInsertTable.setCellSelectionEnabled(true);
        SkillInsertTable.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                SkillInsertTableMouseMoved(evt);
            }
        });
        SkillInsertScrollPane.setViewportView(SkillInsertTable);

        CustomSkillButton.setText("Custom Skills");
        CustomSkillButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CustomSkillButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SkillSheetLayout = new javax.swing.GroupLayout(SkillSheet);
        SkillSheet.setLayout(SkillSheetLayout);
        SkillSheetLayout.setHorizontalGroup(
            SkillSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SkillSheetLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SkillSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SkillInsertScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 795, Short.MAX_VALUE)
                    .addGroup(SkillSheetLayout.createSequentialGroup()
                        .addComponent(CustomSkillButton)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        SkillSheetLayout.setVerticalGroup(
            SkillSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SkillSheetLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(SkillInsertScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CustomSkillButton)
                .addContainerGap(139, Short.MAX_VALUE))
        );

        ddGameTabs.addTab("Edit Skills", SkillSheet);

        featSheet.setPreferredSize(new java.awt.Dimension(900, 532));

        FeatsTable.setModel(new FeatTableModel(CharAbility.getFeatsList().size(),3));
        Integer[] columnIDs = {0,1,2};
        ((FeatTableModel)FeatsTable.getModel()).setColumnIdentifiers(columnIDs);
        for(CharAbility Feat : CharAbility.getFeatsList()) {
            FeatsTable.getModel().setValueAt(Feat.getAbilityName(), Feat.getAbilityCode(), 0);
            FeatsTable.getModel().setValueAt(new Boolean(false),Feat.getAbilityCode(),1);
            FeatsTable.getModel().setValueAt(Feat.getAbilityText(),Feat.getAbilityCode(),2);
            FeatsTable.getColumnModel().getColumn(0).setPreferredWidth(125);
            FeatsTable.getColumnModel().getColumn(1).setPreferredWidth(15);
            FeatsTable.getColumnModel().getColumn(2).setPreferredWidth(500);
        }
        FeatsTable.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                FeatsTableMouseMoved(evt);
            }
        });
        jScrollPane1.setViewportView(FeatsTable);

        javax.swing.GroupLayout featSheetLayout = new javax.swing.GroupLayout(featSheet);
        featSheet.setLayout(featSheetLayout);
        featSheetLayout.setHorizontalGroup(
            featSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(featSheetLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 795, Short.MAX_VALUE)
                .addContainerGap())
        );
        featSheetLayout.setVerticalGroup(
            featSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(featSheetLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 130, Short.MAX_VALUE))
        );

        ddGameTabs.addTab("Edit Feats", featSheet);

        buffSheet.setPreferredSize(new java.awt.Dimension(900, 532));

        javax.swing.GroupLayout buffSheetLayout = new javax.swing.GroupLayout(buffSheet);
        buffSheet.setLayout(buffSheetLayout);
        buffSheetLayout.setHorizontalGroup(
            buffSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 805, Short.MAX_VALUE)
        );
        buffSheetLayout.setVerticalGroup(
            buffSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 532, Short.MAX_VALUE)
        );

        ddGameTabs.addTab("Edit Buffs", buffSheet);

        weaponsAndArmorSheet.setPreferredSize(new java.awt.Dimension(900, 532));

        ArmorPanel.setPreferredSize(new java.awt.Dimension(180, 196));

        ArmorInputLabel.setText("Armor");

        ArmorEnhancementLabel.setText("Enhance");

        ArmorMaterialLabel.setText("Material");

        ArmorSelectBox.setModel(armorNamesList);

        ArmorEnhancementSelectBox.setModel(armorEnhancementList);

        ArmorMaterialSelectBox.setModel(armorMaterialList);

        ArmorEnch1Label.setText("Enchant 1");

        ArmorEnch2Label.setText("Enchant 2");

        ArmorEnch3Label.setText("Enchant 3");

        ArmorEnch1SelectBox.setModel(armorEnchantmentList1);

        ArmorEnch2SelectBox.setModel(armorEnchantmentList2);

        ArmorEnch3SelectBox.setModel(armorEnchantmentList3);

        ArmorPriceLabel.setText("Price:");

        ArmorPriceDisplayLabel.setText("0");

        ArmorAttackLabel.setText("Armor Att.");

        ArmorAttackSelectBox.setModel(armorAttackList);

        javax.swing.GroupLayout ArmorPanelLayout = new javax.swing.GroupLayout(ArmorPanel);
        ArmorPanel.setLayout(ArmorPanelLayout);
        ArmorPanelLayout.setHorizontalGroup(
            ArmorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ArmorPanelLayout.createSequentialGroup()
                .addGroup(ArmorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ArmorAttackLabel)
                    .addComponent(ArmorPriceLabel)
                    .addComponent(ArmorEnch3Label)
                    .addComponent(ArmorEnch2Label)
                    .addComponent(ArmorEnch1Label)
                    .addComponent(ArmorMaterialLabel)
                    .addComponent(ArmorInputLabel)
                    .addComponent(ArmorEnhancementLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ArmorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ArmorSelectBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ArmorEnhancementSelectBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ArmorMaterialSelectBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ArmorEnch1SelectBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ArmorEnch2SelectBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ArmorEnch3SelectBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(ArmorPanelLayout.createSequentialGroup()
                        .addComponent(ArmorPriceDisplayLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(ArmorAttackSelectBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        ArmorPanelLayout.setVerticalGroup(
            ArmorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ArmorPanelLayout.createSequentialGroup()
                .addGroup(ArmorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ArmorInputLabel)
                    .addComponent(ArmorSelectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ArmorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ArmorEnhancementLabel)
                    .addComponent(ArmorEnhancementSelectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ArmorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ArmorMaterialLabel)
                    .addComponent(ArmorMaterialSelectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ArmorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ArmorEnch1Label)
                    .addComponent(ArmorEnch1SelectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ArmorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ArmorEnch2Label)
                    .addComponent(ArmorEnch2SelectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ArmorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ArmorEnch3Label)
                    .addComponent(ArmorEnch3SelectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ArmorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ArmorAttackLabel)
                    .addComponent(ArmorAttackSelectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ArmorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ArmorPriceLabel)
                    .addComponent(ArmorPriceDisplayLabel)))
        );

        WeaponPanel.setPreferredSize(new java.awt.Dimension(180, 196));

        WeaponInputLabel.setText("Weapon");

        WeaponEnhancementLabel.setText("Enhance");

        WeaponMaterialLabel.setText("Material");

        WeaponEnch1Label.setText("Enchant 1");

        WeaponEnch2Label.setText("Enchant 2");

        WeaponEnch3Label.setText("Enchant 3");

        WeaponSizeLabel.setText("Size");

        WeaponPriceLabel.setText("Price:");

        WeaponSelectBox.setModel(weaponNamesList1);

        WeaponEnhancementSelectBox.setModel(weaponEnhancementList1);

        WeaponMaterialSelectBox.setModel(weaponMaterialList1);

        WeaponSizeSelectBox.setModel(weaponSizeList1);

        WeaponEnch1SelectBox.setModel(weapon1EnchantmentList1);

        WeaponEnch2SelectBox.setModel(weapon1EnchantmentList2);

        WeaponEnch3SelectBox.setModel(weapon1EnchantmentList3);

        WeaponPriceDisplayLabel.setText("0");

        javax.swing.GroupLayout WeaponPanelLayout = new javax.swing.GroupLayout(WeaponPanel);
        WeaponPanel.setLayout(WeaponPanelLayout);
        WeaponPanelLayout.setHorizontalGroup(
            WeaponPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WeaponPanelLayout.createSequentialGroup()
                .addGroup(WeaponPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(WeaponPriceLabel)
                    .addComponent(WeaponSizeLabel)
                    .addComponent(WeaponEnch3Label)
                    .addComponent(WeaponEnch2Label)
                    .addComponent(WeaponEnch1Label)
                    .addComponent(WeaponMaterialLabel)
                    .addComponent(WeaponEnhancementLabel)
                    .addComponent(WeaponInputLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(WeaponEnhancementSelectBox, 0, 126, Short.MAX_VALUE)
                    .addComponent(WeaponMaterialSelectBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(WeaponSizeSelectBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(WeaponEnch1SelectBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(WeaponEnch2SelectBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(WeaponEnch3SelectBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(WeaponPanelLayout.createSequentialGroup()
                        .addComponent(WeaponPriceDisplayLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(WeaponSelectBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        WeaponPanelLayout.setVerticalGroup(
            WeaponPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WeaponPanelLayout.createSequentialGroup()
                .addGroup(WeaponPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponInputLabel)
                    .addComponent(WeaponSelectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponEnhancementLabel)
                    .addComponent(WeaponEnhancementSelectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponMaterialLabel)
                    .addComponent(WeaponMaterialSelectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponSizeLabel)
                    .addComponent(WeaponSizeSelectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponEnch1Label)
                    .addComponent(WeaponEnch1SelectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponEnch2Label)
                    .addComponent(WeaponEnch2SelectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponEnch3Label)
                    .addComponent(WeaponEnch3SelectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponPriceLabel)
                    .addComponent(WeaponPriceDisplayLabel)))
        );

        ShieldPanel.setPreferredSize(new java.awt.Dimension(180, 196));

        ShieldLabel.setText("Shield");

        ShieldEnhancementLabel.setText("Enhance");

        ShieldMaterialLabel.setText("Material");

        ShieldEnch1Label.setText("Enchant 1");

        ShieldEnch2Label.setText("Enchant 2");

        ShieldEnch3Label.setText("Enchant 3");

        ShieldPriceLabel.setText("Price:");

        ShieldPriceDisplayLabel.setText("0");

        ShieldSelectBox.setModel(shieldNamesList);

        ShieldEnhancementSelectBox.setModel(shieldEnhancementList);

        ShieldMaterialSelectBox.setModel(shieldMaterialList);

        ShieldEnch1SelectBox.setModel(shieldEnchantmentList1);

        ShieldEnch2SelectBox.setModel(shieldEnchantmentList1);

        ShieldEnch3SelectBox.setModel(shieldEnchantmentList1);

        ShieldAttackLabel.setText("Shield Att.");

        ShieldAttackSelectBox.setModel(shieldAttackList);

        javax.swing.GroupLayout ShieldPanelLayout = new javax.swing.GroupLayout(ShieldPanel);
        ShieldPanel.setLayout(ShieldPanelLayout);
        ShieldPanelLayout.setHorizontalGroup(
            ShieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShieldPanelLayout.createSequentialGroup()
                .addGroup(ShieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ShieldEnch3Label)
                    .addComponent(ShieldEnch2Label)
                    .addComponent(ShieldLabel)
                    .addComponent(ShieldEnhancementLabel)
                    .addGroup(ShieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(ShieldEnch1Label)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ShieldPanelLayout.createSequentialGroup()
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ShieldMaterialLabel)))
                    .addComponent(ShieldAttackLabel)
                    .addComponent(ShieldPriceLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ShieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ShieldSelectBox, 0, 124, Short.MAX_VALUE)
                    .addComponent(ShieldEnhancementSelectBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ShieldMaterialSelectBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ShieldEnch1SelectBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ShieldEnch2SelectBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ShieldEnch3SelectBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(ShieldPanelLayout.createSequentialGroup()
                        .addComponent(ShieldPriceDisplayLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(ShieldAttackSelectBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        ShieldPanelLayout.setVerticalGroup(
            ShieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShieldPanelLayout.createSequentialGroup()
                .addGroup(ShieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ShieldLabel)
                    .addComponent(ShieldSelectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ShieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ShieldEnhancementLabel)
                    .addComponent(ShieldEnhancementSelectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ShieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ShieldMaterialLabel)
                    .addComponent(ShieldMaterialSelectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ShieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ShieldEnch1Label)
                    .addComponent(ShieldEnch1SelectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ShieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ShieldEnch2Label)
                    .addComponent(ShieldEnch2SelectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ShieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ShieldEnch3Label)
                    .addComponent(ShieldEnch3SelectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ShieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ShieldAttackLabel)
                    .addComponent(ShieldAttackSelectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ShieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ShieldPriceLabel)
                    .addComponent(ShieldPriceDisplayLabel)))
        );

        WeaponInputLabel1.setText("Weapon");

        WeaponEnhancementLabel1.setText("Enhance");

        WeaponMaterialLabel1.setText("Material");

        WeaponEnch1Label1.setText("Enchant 1");

        WeaponEnch2Label1.setText("Enchant 2");

        WeaponEnch3Label1.setText("Enchant 3");

        WeaponSizeLabel1.setText("Size");

        WeaponPriceLabel1.setText("Price:");

        WeaponSelectBox1.setModel(weaponNamesList3);

        WeaponEnhancementSelectBox1.setModel(weaponEnhancementList3);

        WeaponMaterialSelectBox1.setModel(weaponMaterialList3);

        WeaponSizeSelectBox1.setModel(weaponSizeList3);

        WeaponEnch1SelectBox1.setModel(weapon3EnchantmentList1);

        WeaponEnch2SelectBox1.setModel(weapon3EnchantmentList2);

        WeaponEnch3SelectBox1.setModel(weapon3EnchantmentList3);

        WeaponPriceDisplayLabel1.setText("0");

        javax.swing.GroupLayout WeaponPanel1Layout = new javax.swing.GroupLayout(WeaponPanel1);
        WeaponPanel1.setLayout(WeaponPanel1Layout);
        WeaponPanel1Layout.setHorizontalGroup(
            WeaponPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WeaponPanel1Layout.createSequentialGroup()
                .addGroup(WeaponPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(WeaponPriceLabel1)
                    .addComponent(WeaponSizeLabel1)
                    .addComponent(WeaponEnch3Label1)
                    .addComponent(WeaponEnch2Label1)
                    .addComponent(WeaponEnch1Label1)
                    .addComponent(WeaponMaterialLabel1)
                    .addComponent(WeaponEnhancementLabel1)
                    .addComponent(WeaponInputLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(WeaponSelectBox1, 0, 126, Short.MAX_VALUE)
                    .addComponent(WeaponEnhancementSelectBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(WeaponMaterialSelectBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(WeaponSizeSelectBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(WeaponEnch1SelectBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(WeaponEnch2SelectBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(WeaponEnch3SelectBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(WeaponPanel1Layout.createSequentialGroup()
                        .addComponent(WeaponPriceDisplayLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        WeaponPanel1Layout.setVerticalGroup(
            WeaponPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WeaponPanel1Layout.createSequentialGroup()
                .addGroup(WeaponPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponInputLabel1)
                    .addComponent(WeaponSelectBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponEnhancementLabel1)
                    .addComponent(WeaponEnhancementSelectBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponMaterialLabel1)
                    .addComponent(WeaponMaterialSelectBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponSizeLabel1)
                    .addComponent(WeaponSizeSelectBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponEnch1Label1)
                    .addComponent(WeaponEnch1SelectBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponEnch2Label1)
                    .addComponent(WeaponEnch2SelectBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponEnch3Label1)
                    .addComponent(WeaponEnch3SelectBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponPriceLabel1)
                    .addComponent(WeaponPriceDisplayLabel1)))
        );

        WeaponPanel2.setPreferredSize(new java.awt.Dimension(180, 196));

        WeaponInputLabel2.setText("Weapon");

        WeaponEnhancementLabel2.setText("Enhance");

        WeaponMaterialLabel2.setText("Material");

        WeaponEnch1Label2.setText("Enchant 1");

        WeaponEnch2Label2.setText("Enchant 2");

        WeaponEnch3Label2.setText("Enchant 3");

        WeaponSizeLabel2.setText("Size");

        WeaponPriceLabel2.setText("Price:");

        WeaponSelectBox2.setModel(weaponNamesList2);

        WeaponEnhancementSelectBox2.setModel(weaponEnhancementList2);

        WeaponMaterialSelectBox2.setModel(weaponMaterialList2);

        WeaponSizeSelectBox2.setModel(weaponSizeList2);

        WeaponEnch1SelectBox2.setModel(weapon2EnchantmentList1);

        WeaponEnch2SelectBox2.setModel(weapon2EnchantmentList2);

        WeaponEnch3SelectBox2.setModel(weapon2EnchantmentList3);

        WeaponPriceDisplayLabel2.setText("0");

        javax.swing.GroupLayout WeaponPanel2Layout = new javax.swing.GroupLayout(WeaponPanel2);
        WeaponPanel2.setLayout(WeaponPanel2Layout);
        WeaponPanel2Layout.setHorizontalGroup(
            WeaponPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WeaponPanel2Layout.createSequentialGroup()
                .addGroup(WeaponPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(WeaponPriceLabel2)
                    .addComponent(WeaponSizeLabel2)
                    .addComponent(WeaponEnch3Label2)
                    .addComponent(WeaponEnch2Label2)
                    .addComponent(WeaponEnch1Label2)
                    .addComponent(WeaponMaterialLabel2)
                    .addComponent(WeaponEnhancementLabel2)
                    .addComponent(WeaponInputLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(WeaponSelectBox2, 0, 126, Short.MAX_VALUE)
                    .addComponent(WeaponEnhancementSelectBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(WeaponMaterialSelectBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(WeaponSizeSelectBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(WeaponEnch1SelectBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(WeaponEnch2SelectBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(WeaponEnch3SelectBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(WeaponPanel2Layout.createSequentialGroup()
                        .addComponent(WeaponPriceDisplayLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        WeaponPanel2Layout.setVerticalGroup(
            WeaponPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WeaponPanel2Layout.createSequentialGroup()
                .addGroup(WeaponPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponInputLabel2)
                    .addComponent(WeaponSelectBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponEnhancementLabel2)
                    .addComponent(WeaponEnhancementSelectBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponMaterialLabel2)
                    .addComponent(WeaponMaterialSelectBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponSizeLabel2)
                    .addComponent(WeaponSizeSelectBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponEnch1Label2)
                    .addComponent(WeaponEnch1SelectBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponEnch2Label2)
                    .addComponent(WeaponEnch2SelectBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponEnch3Label2)
                    .addComponent(WeaponEnch3SelectBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponPriceLabel2)
                    .addComponent(WeaponPriceDisplayLabel2)))
        );

        WeaponPanel3.setPreferredSize(new java.awt.Dimension(180, 196));

        WeaponInputLabel3.setText("Weapon");

        WeaponEnhancementLabel3.setText("Enhance");

        WeaponMaterialLabel3.setText("Material");

        WeaponEnch1Label3.setText("Enchant 1");

        WeaponEnch2Label3.setText("Enchant 2");

        WeaponEnch3Label3.setText("Enchant 3");

        WeaponSizeLabel3.setText("Size");

        WeaponPriceLabel3.setText("Price:");

        WeaponSelectBox3.setModel(weaponNamesList4);

        WeaponEnhancementSelectBox3.setModel(weaponEnhancementList4);

        WeaponMaterialSelectBox3.setModel(weaponMaterialList4);

        WeaponSizeSelectBox3.setModel(weaponSizeList4);

        WeaponEnch1SelectBox3.setModel(weapon4EnchantmentList1);

        WeaponEnch2SelectBox3.setModel(weapon4EnchantmentList2);

        WeaponEnch3SelectBox3.setModel(weapon4EnchantmentList3);

        WeaponPriceDisplayLabel3.setText("0");

        javax.swing.GroupLayout WeaponPanel3Layout = new javax.swing.GroupLayout(WeaponPanel3);
        WeaponPanel3.setLayout(WeaponPanel3Layout);
        WeaponPanel3Layout.setHorizontalGroup(
            WeaponPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WeaponPanel3Layout.createSequentialGroup()
                .addGroup(WeaponPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(WeaponPriceLabel3)
                    .addComponent(WeaponSizeLabel3)
                    .addComponent(WeaponEnch3Label3)
                    .addComponent(WeaponEnch2Label3)
                    .addComponent(WeaponEnch1Label3)
                    .addComponent(WeaponMaterialLabel3)
                    .addComponent(WeaponEnhancementLabel3)
                    .addComponent(WeaponInputLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(WeaponSelectBox3, 0, 126, Short.MAX_VALUE)
                    .addComponent(WeaponEnhancementSelectBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(WeaponMaterialSelectBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(WeaponSizeSelectBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(WeaponEnch1SelectBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(WeaponEnch2SelectBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(WeaponEnch3SelectBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(WeaponPanel3Layout.createSequentialGroup()
                        .addComponent(WeaponPriceDisplayLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        WeaponPanel3Layout.setVerticalGroup(
            WeaponPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WeaponPanel3Layout.createSequentialGroup()
                .addGroup(WeaponPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponInputLabel3)
                    .addComponent(WeaponSelectBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponEnhancementLabel3)
                    .addComponent(WeaponEnhancementSelectBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponMaterialLabel3)
                    .addComponent(WeaponMaterialSelectBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponSizeLabel3)
                    .addComponent(WeaponSizeSelectBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponEnch1Label3)
                    .addComponent(WeaponEnch1SelectBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponEnch2Label3)
                    .addComponent(WeaponEnch2SelectBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponEnch3Label3)
                    .addComponent(WeaponEnch3SelectBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WeaponPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeaponPriceLabel3)
                    .addComponent(WeaponPriceDisplayLabel3)))
        );

        ItemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)},
                {new String(), new Double(0.0), new Double(0.0)}
            },
            new String [] {
                "Item", "Cost", "Weight"
            }
        ));
        jScrollPane2.setViewportView(ItemTable);

        javax.swing.GroupLayout weaponsAndArmorSheetLayout = new javax.swing.GroupLayout(weaponsAndArmorSheet);
        weaponsAndArmorSheet.setLayout(weaponsAndArmorSheetLayout);
        weaponsAndArmorSheetLayout.setHorizontalGroup(
            weaponsAndArmorSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(weaponsAndArmorSheetLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(weaponsAndArmorSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ShieldPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ArmorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(weaponsAndArmorSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(weaponsAndArmorSheetLayout.createSequentialGroup()
                        .addComponent(WeaponPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(WeaponPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(weaponsAndArmorSheetLayout.createSequentialGroup()
                        .addComponent(WeaponPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(WeaponPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                .addContainerGap())
        );
        weaponsAndArmorSheetLayout.setVerticalGroup(
            weaponsAndArmorSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(weaponsAndArmorSheetLayout.createSequentialGroup()
                .addGroup(weaponsAndArmorSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(weaponsAndArmorSheetLayout.createSequentialGroup()
                        .addGroup(weaponsAndArmorSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ArmorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(WeaponPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(WeaponPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(weaponsAndArmorSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(WeaponPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(WeaponPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ShieldPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(0, 134, Short.MAX_VALUE))
        );

        ddGameTabs.addTab("Weapons & Armor", weaponsAndArmorSheet);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ddGameTabs, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 810, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ddGameTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ClassSelectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClassSelectButtonActionPerformed
        // TODO add your handling code here:
        ClassSelectWindow2 ClassSelect = new ClassSelectWindow2(this, true);
        ClassSelect.setEnabled(true);
        ClassSelect.setVisible(true);
    }//GEN-LAST:event_ClassSelectButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO continue adding variables to be saved as they are integrated
        curChar.setVars(charNameInsertBox, statsCollector(), RaceSelector, 
                       skillcollector(), featscollector(), DomainsCollector(), monkFeatsCollector(), 
                       favoredEnemiesCollector(), CombatStyleBox.getSelectedIndex(), 
                       rogueAbilitiesCollector(), wizardSpecialtyCollector(),
                       armorcollector(), shieldcollector(), weaponcollector(),
                       itemcollector());

        boolean fileTest = TextIO.writeUserSelectedFile();
        if(fileTest) {
            TextIO.putln(curChar.name);
            TextIO.putln(curChar.exp);
            TextIO.putln(curChar.racenum);
            for(int x = 0;x<curChar.storedSelected.length;x++) {
                TextIO.put(curChar.storedSelected[x]+ " ");
            }
            TextIO.putln();
            for(int x = 0;x<curChar.DomainsSelected.length;x++) {
                TextIO.put(curChar.DomainsSelected[x] + " ");
            }
            TextIO.putln();
            TextIO.put(STRInsertBox.getText() + " ");
            TextIO.put(DEXInsertBox.getText() + " ");
            TextIO.put(CONInsertBox.getText() + " ");
            TextIO.put(INTInsertBox.getText() + " ");
            TextIO.put(WISInsertBox.getText() + " ");
            TextIO.put(CHAInsertBox.getText() + " ");
            TextIO.putln();
            for(int x = 1;x<SkillInsertTable.getColumnCount();x++) {
                for(int y = 0;y<SkillInsertTable.getRowCount();y++) {
                    TextIO.put(SkillInsertTable.getValueAt(y,x) + " ");
                }
                TextIO.putln();
            }
            for(int x = 0;x<FeatsTable.getRowCount();x++) {
                TextIO.put(FeatsTable.getValueAt(x,1)+ " ");
            }
            TextIO.putln();
            for(int x = 0;x<curChar.storedHPTotals.length;x++) {
                TextIO.put(curChar.storedHPTotals[x] + " ");
            }
            TextIO.putln();
            TextIO.putln(curChar.HPCurrent);
            for(String skillName : curChar.skillNames) {
                TextIO.putln(skillName);
            }
        }
        else {
        }
        TextIO.writeStandardOutput();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        // TODO continue adding variables to be saved as they are integrated
        boolean fileTest = TextIO.readUserSelectedFile();
        if(fileTest) {
            charNameInsertBox.setText(TextIO.getln());
            expInsertBox.setText("" + TextIO.getlnInt());
            RaceSelector.setSelectedIndex(TextIO.getlnInt());
            for(int x = 0 ; x< curChar.storedSelected.length;x++) {
                curChar.storedSelected[x] = TextIO.getInt();
            }
            TextIO.getln();
            domain1ComboBox.setSelectedIndex(TextIO.getInt());
            domain2ComboBox.setSelectedIndex(TextIO.getInt());
            domain3ComboBox.setSelectedIndex(TextIO.getInt());
            domain4ComboBox.setSelectedIndex(TextIO.getInt());
            domain5ComboBox.setSelectedIndex(TextIO.getInt());
            domain6ComboBox.setSelectedIndex(TextIO.getlnInt());
            STRInsertBox.setText("" + TextIO.getInt());
            DEXInsertBox.setText("" + TextIO.getInt());
            CONInsertBox.setText("" + TextIO.getInt());
            INTInsertBox.setText("" + TextIO.getInt());
            WISInsertBox.setText("" + TextIO.getInt());
            CHAInsertBox.setText("" + TextIO.getlnInt());
            for(int x = 1;x<SkillInsertTable.getColumnCount();x++) {
                for(int y = 0;y<SkillInsertTable.getRowCount();y++) {
                    SkillInsertTable.setValueAt(TextIO.getInt(),y,x);
                }
                TextIO.getln();
            }
            for(int x = 0;x<FeatsTable.getRowCount();x++) {
                FeatsTable.setValueAt(TextIO.getBoolean(),x,1);
            }
            TextIO.getln();
            for(int x = 0;x < curChar.storedHPTotals.length;x++) {
                curChar.storedHPTotals[x] = TextIO.getInt();
            }
            TextIO.getln();
            HPCurrentField.setText(TextIO.getln());
            for(int x = 0;x<curChar.skillNames.size();x++) {
                curChar.skillNames.set(x, TextIO.getln());
            }
            curChar.setVars(charNameInsertBox, statsCollector(), RaceSelector, 
                           skillcollector(), featscollector(), DomainsCollector(), monkFeatsCollector(), 
                           favoredEnemiesCollector(), CombatStyleBox.getSelectedIndex(), 
                           rogueAbilitiesCollector(), wizardSpecialtyCollector(),
                       armorcollector(), shieldcollector(), weaponcollector(),
                       itemcollector());
            updater();
        }
        else {
        }
        TextIO.readStandardInput();
    }//GEN-LAST:event_loadButtonActionPerformed

    private void CustomSkillButtonActionPerformed(java.awt.event.ActionEvent evt) {
        
        CustomSkillWindow CustomSkill = new CustomSkillWindow(this, true);
        CustomSkill.setEnabled(true);
        CustomSkill.setVisible(true);
    }                                                 

    private void SkillInsertTableMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SkillInsertTableMouseMoved
        // TODO add your handling code here:
        for(int x = 1;x<SkillInsertTable.getColumnCount();x++) { //for each column in the table besides the first
                int sum = 0; //sum starts at 0
                int skillsPerLevel; //will store skill points per level
                int pointsRemaining; //the final value
                if(curChar.storedSelected[x-1]!=-1 && curChar.level>=x) { //make sure a class has been chosen for this level
                    skillsPerLevel = curChar.Classes.get(curChar.storedSelected[x-1]).getSkillPoints()+curChar.bonusarray[3];//get the selected classes skill points, add intelligence bonus
                }
                else {
                    skillsPerLevel = 0;//otherwise 0 if no class selected
                }
                if(curChar.race.raceName.equals("Human")) {
                    skillsPerLevel++; //if human get one extra point
                }
                for(int y = 0;y<SkillInsertTable.getRowCount();y++) { //for each row in the column                	 
                	try { //just in case something weird happens
                		sum += (int)SkillInsertTable.getModel().getValueAt(y, x); //add the value to sum
                	}
                	catch(ClassCastException ex) {}catch(NullPointerException nu) {
                    	SkillInsertTable.setValueAt(0, y, x);
                    }
                }   
            
                if(x==1) {pointsRemaining = skillsPerLevel*4-sum;}//if level 1 multiply points per level by 4
                else {pointsRemaining = skillsPerLevel-sum;}//otherwise we just subtract our values
                SkillInsertTable.getColumnModel().getColumn(x).setHeaderValue(pointsRemaining); //then set the header value
            }
    }//GEN-LAST:event_SkillInsertTableMouseMoved

    private void FeatsTableMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FeatsTableMouseMoved
        // TODO add your handling code here:
        int FeatsSelected = 0;
        int FeatsRemaining;
        for(int x = 0;x<FeatsTable.getRowCount();x++) {
            if((boolean)FeatsTable.getValueAt(x, 1)) {
                FeatsSelected++;
            }
        }
        FeatsRemaining = curChar.level/3+1+curChar.bonusFeats-FeatsSelected;
        FeatsTable.getColumnModel().getColumn(0).setHeaderValue("Feats Remaining: " + FeatsRemaining); //then set the header value
        FeatsTable.getColumnModel().getColumn(1).setHeaderValue("");
        FeatsTable.getColumnModel().getColumn(2).setHeaderValue("");
    }//GEN-LAST:event_FeatsTableMouseMoved

    private void ddGameTabsMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ddGameTabsMouseMoved
        // TODO add your handling code here:
        curChar.setVars(charNameInsertBox, statsCollector(), RaceSelector, 
                       skillcollector(), featscollector(), DomainsCollector(), monkFeatsCollector(), 
                       favoredEnemiesCollector(), CombatStyleBox.getSelectedIndex(), 
                       rogueAbilitiesCollector(), wizardSpecialtyCollector(),
                       armorcollector(), shieldcollector(), weaponcollector(),
                       itemcollector());
        updater();
        FeatsTableMouseMoved(evt);
        SkillInsertTableMouseMoved(evt);
    }//GEN-LAST:event_ddGameTabsMouseMoved
   public Armor armorcollector() {
       Armor armor;
       armor = Armor.copy(Armor.ArmorList.get(ArmorSelectBox.getSelectedIndex()));
       if(ArmorMaterialSelectBox.getSelectedIndex()!=0) {
           armor.armorMaterial = (Armor.ArmorMaterial)ArmorMaterialSelectBox.getSelectedItem();
       }
       armor.enhancementBonus = (Armor.Enhancement)ArmorEnhancementSelectBox.getSelectedItem();
       armor.enchantment1 = ArmorEnch1SelectBox.getSelectedIndex();
       armor.enchantment2 = ArmorEnch2SelectBox.getSelectedIndex();
       armor.enchantment3 = ArmorEnch3SelectBox.getSelectedIndex();
       armor.armorAttack = (Armor.ArmorAttack)ArmorAttackSelectBox.getSelectedItem();
       return armor;
   }
   public Armor shieldcollector() {
       Armor shield;
       shield = Armor.copy(Armor.ShieldList.get(ShieldSelectBox.getSelectedIndex()));
       if(ShieldMaterialSelectBox.getSelectedIndex()!=0) {
           shield.armorMaterial = (Armor.ArmorMaterial)ShieldMaterialSelectBox.getSelectedItem();
       }
       shield.enhancementBonus = (Armor.Enhancement)ShieldEnhancementSelectBox.getSelectedItem();
       shield.enchantment1 = ShieldEnch1SelectBox.getSelectedIndex();
       shield.enchantment2 = ShieldEnch2SelectBox.getSelectedIndex();
       shield.enchantment3 = ShieldEnch3SelectBox.getSelectedIndex();
       shield.armorAttack = (Armor.ArmorAttack)ShieldAttackSelectBox.getSelectedItem();
       return shield;
   }
   public Weapon[] weaponcollector() {
       Weapon[] weapons = new Weapon[4];
       weapons[0] = Weapon.copy(Weapon.WeaponList.get(WeaponSelectBox.getSelectedIndex()));
       weapons[0].enhancementbonus = (Weapon.Enhancement)WeaponEnhancementSelectBox.getSelectedItem();
       if(WeaponMaterialSelectBox.getSelectedIndex()!=0) {
           weapons[0].weaponMaterial = (Weapon.WeaponMaterial)WeaponMaterialSelectBox.getSelectedItem();
       }
       weapons[0].weaponsize = (Weapon.Size)WeaponSizeSelectBox.getSelectedItem();
       weapons[0].enchantment1 = WeaponEnch1SelectBox.getSelectedIndex();
       weapons[0].enchantment2 = WeaponEnch2SelectBox.getSelectedIndex();
       weapons[0].enchantment3 = WeaponEnch3SelectBox.getSelectedIndex();
       weapons[1] = Weapon.copy(Weapon.WeaponList.get(WeaponSelectBox2.getSelectedIndex()));
       weapons[1].enhancementbonus = (Weapon.Enhancement)WeaponEnhancementSelectBox2.getSelectedItem();
       if(WeaponMaterialSelectBox2.getSelectedIndex()!=0) {
           weapons[1].weaponMaterial = (Weapon.WeaponMaterial)WeaponMaterialSelectBox2.getSelectedItem();
       }
       weapons[1].weaponsize = (Weapon.Size)WeaponSizeSelectBox2.getSelectedItem();
       weapons[1].enchantment1 = WeaponEnch1SelectBox2.getSelectedIndex();
       weapons[1].enchantment2 = WeaponEnch2SelectBox2.getSelectedIndex();
       weapons[1].enchantment3 = WeaponEnch3SelectBox2.getSelectedIndex();
       weapons[2] = Weapon.copy(Weapon.WeaponList.get(WeaponSelectBox1.getSelectedIndex()));
       weapons[2].enhancementbonus = (Weapon.Enhancement)WeaponEnhancementSelectBox1.getSelectedItem();
       if(WeaponMaterialSelectBox1.getSelectedIndex()!=0) {
           weapons[2].weaponMaterial = (Weapon.WeaponMaterial)WeaponMaterialSelectBox1.getSelectedItem();
       }
       weapons[2].weaponsize = (Weapon.Size)WeaponSizeSelectBox1.getSelectedItem();
       weapons[2].enchantment1 = WeaponEnch1SelectBox1.getSelectedIndex();
       weapons[2].enchantment2 = WeaponEnch2SelectBox1.getSelectedIndex();
       weapons[2].enchantment3 = WeaponEnch3SelectBox1.getSelectedIndex();
       weapons[3] = Weapon.copy(Weapon.WeaponList.get(WeaponSelectBox3.getSelectedIndex()));
       weapons[3].enhancementbonus = (Weapon.Enhancement)WeaponEnhancementSelectBox3.getSelectedItem();
       if(WeaponMaterialSelectBox.getSelectedIndex()!=0) {
           weapons[3].weaponMaterial = (Weapon.WeaponMaterial)WeaponMaterialSelectBox3.getSelectedItem();
       }
       weapons[3].weaponsize = (Weapon.Size)WeaponSizeSelectBox3.getSelectedItem();
       weapons[3].enchantment1 = WeaponEnch1SelectBox3.getSelectedIndex();
       weapons[3].enchantment2 = WeaponEnch2SelectBox3.getSelectedIndex();
       weapons[3].enchantment3 = WeaponEnch3SelectBox3.getSelectedIndex();
       return weapons;
   }
   public double[][] skillcollector() {
       double[][] skillpoints = new double[79][20];
       for(int x = 0;x < skillpoints.length;x++) {
           for(int y = 0;y < skillpoints[x].length;y++) {
               if(y<=curChar.level) {
                if(curChar.classSkillArray[x][y+1]) {
                    try {
                        skillpoints[x][y] = ((int)SkillInsertTable.getModel().getValueAt(x, y+1));
                    }
                    catch (IllegalArgumentException b){
                        skillpoints[x][y] = 0;
                    }
                }
                else {
                    try {
                        skillpoints[x][y] = ((int)SkillInsertTable.getModel().getValueAt(x, y+1))/2;
                    }
                    catch (IllegalArgumentException b){
                        skillpoints[x][y] = 0;
                    }                    
                }
            }
           }
       }
       return skillpoints;
   }
   public ArrayList<Boolean> featscollector() {
       ArrayList<Boolean> SelectedFeats = new ArrayList<>();
       for(int x = 0;x<FeatsTable.getRowCount();x++) {
           SelectedFeats.add((Boolean)FeatsTable.getModel().getValueAt(x,1));
       }
       return SelectedFeats;
       
   }
   public ArrayList<double[]> itemcollector() {
       ArrayList<double[]> items = new ArrayList<>();
       for(int x = 0;x<ItemTable.getRowCount();x++) {
           double[] thisitem = new double[2];
           thisitem[0] = (Double)ItemTable.getModel().getValueAt(x,1);
           thisitem[1] = (Double)ItemTable.getModel().getValueAt(x,2);
           items.add(thisitem);
       }
       return items;
   }
   /**
 * updater is run at load and when the character sheet window is focused on.
 * It checks the inserted values in the text fields of the edit character tab,
 * sends values for calculation, and updates the character sheet accordingly.
 * This is the big kahuna method for getting everything done 
 */
   public void updater() {
   // declare some local scope variables.
       String bufferstring = "Class:"; //bufferstring is used to write to the class label on character sheet
       setSkillTableWidths();
   //update the values in the Player Character Object
//update the values in the text fields below this point
        levelLabel.setText("Level: " + curChar.level); //level
        expLabel.setText("Experience: " + curChar.exp); //experience
        charNameLabel.setText("Name: " + curChar.name); //character name
        RaceLabel.setText("Race: " + curChar.race.raceName); //race
        //stats and ability bonuses
        if(curChar.bonusarray[0]<0) { //if the bonus is negative do this...
            STRLabel.setText("STR: " + curChar.statarray[0] + "  " + curChar.bonusarray[0]);        
        }
        else { //but if the bonus is 0 or positive we need a + sign added first
            STRLabel.setText("STR: " + curChar.statarray[0] + "  +" + curChar.bonusarray[0]);
        }
        if(curChar.bonusarray[1]<0) {
            DEXLabel.setText("DEX: " + curChar.statarray[1] + "  " + curChar.bonusarray[1]);        
        }
        else {
            DEXLabel.setText("DEX: " + curChar.statarray[1] + "  +" + curChar.bonusarray[1]);
        }
        if(curChar.bonusarray[2]<0) {
            CONLabel.setText("CON: " + curChar.statarray[2] + "  " + curChar.bonusarray[2]);        
        }
        else {
            CONLabel.setText("CON: " + curChar.statarray[2] + "  +" + curChar.bonusarray[2]);
        }
        if(curChar.bonusarray[3]<0) {
            INTLabel.setText("INT: " + curChar.statarray[3] + "  " + curChar.bonusarray[3]);        
        }
        else {
            INTLabel.setText("INT: " + curChar.statarray[3] + "  +" + curChar.bonusarray[3]);
        }
        if(curChar.bonusarray[4]<0) {
            WISLabel.setText("WIS: " + curChar.statarray[4] + "  " + curChar.bonusarray[4]);        
        }
        else {
            WISLabel.setText("WIS: " + curChar.statarray[4] + "  +" + curChar.bonusarray[4]);
        }
        if(curChar.bonusarray[5]<0) {
            CHALabel.setText("CHA: " + curChar.statarray[5] + "  " + curChar.bonusarray[5]);        
        }
        else {
            CHALabel.setText("CHA: " + curChar.statarray[5] + "  +" + curChar.bonusarray[5]);
        }
        LevelUpLabel.setVisible(false); //set this to false by default...
        if(curChar.totalClassLevels<curChar.level) { //but if they haven't selected enough class levels...
            LevelUpLabel.setVisible(true); //tell them to level up
        }

        for(int x = 1;x<curChar.ClassCounter.size() && x<curChar.Classes.size();x++) {
            if(curChar.ClassCounter.get(x)>0) {
            bufferstring = bufferstring + curChar.Classes.get(x).getName() + " " + curChar.ClassCounter.get(x) + " ";
            }
        }
        //then use it as ClassLabel
        ClassLabel.setText(bufferstring);
        GenderLabel.setText("Gender: " +(String)GenderBox.getSelectedItem());
        BABLabel.setText("BAB: " + curChar.getBAB()); //and BAB
        FortLabel.setText("Fortitude: " + curChar.getFortitudeSave());
        ReflexLabel.setText("Reflex: " + curChar.getReflexSave());
        WillLabel.setText("Will: " + curChar.getWillSave());
        MeleeAttackLabel.setText("MeleeAtt: " + curChar.getMeleeAttack());
        RangeAttackLabel.setText("RangeAtt: " + curChar.getRangeAttack());
        TripLabel.setText("Trip A/D:" + curChar.getTripAttack() + "/" + curChar.getTripDefense());
        GrappleLabel.setText("Grapple: " + curChar.getGrapple());
        OverrunLabel.setText("Overrun A/D:" + curChar.getOverrunAttack() + "/" + curChar.getOverrunDefense());
        BullrushLabel.setText("Bullrush A/D: " + curChar.getBullRushAttack() + "/" + curChar.getBullRushDefense());
        SpeedLabel.setText("Speed: " + curChar.getCharSpeed());
        ACLabel.setText("AC: " + curChar.getAC());
        TouchACLabel.setText("Touch AC: " + curChar.getACTouch());
        FlatFootedACLabel.setText("Flat-Footed AC: " + curChar.getACFlatFooted());
        HPMaxLabel.setText("/" + curChar.getHPMax());
        WeightLabel.setText("Weight: " + curChar.totalweightcarried);
        LightLoadLabel.setText("Light Load: " + curChar.lightload);
        MediumLoadLabel.setText("Medium Load: " + curChar.mediumload);
        HeavyLoadLabel.setText("Heavy Load: " + curChar.heavyload);
        HPCurrentField.setText("" + curChar.HPCurrent); //for when updater is being called from load, otherwise does nothing or gets rid of bad characters
        setSkillBox();
        setFeatsBox();
        revealClassFeatureSelectBoxes();
        LanguagesKnown.setText(LanguageInsertArea.getText());
        FeatsTable.getColumnModel().getColumn(0).setHeaderValue("Feats Remaining: "); //then set the header value
        FeatsTable.getColumnModel().getColumn(1).setHeaderValue("");
        FeatsTable.getColumnModel().getColumn(2).setHeaderValue("");
        ArmorPriceDisplayLabel.setText("" + curChar.armor.basecost);
        ShieldPriceDisplayLabel.setText("" + curChar.shield.basecost);
        WeaponPriceDisplayLabel.setText("" + curChar.weapons[0].basecost);
        WeaponPriceDisplayLabel1.setText("" + curChar.weapons[2].basecost);
        WeaponPriceDisplayLabel2.setText("" + curChar.weapons[1].basecost);
        WeaponPriceDisplayLabel3.setText("" + curChar.weapons[3].basecost);
        Att1Label.setText("Attack 1: +" + curChar.weapons[0].attackbonus 
                + "(" + curChar.weapons[0].numAttackDice + "d" + curChar.weapons[0].dieSize + "+" + curChar.weapons[0].damagebonus + ") "
                + "crit " + curChar.weapons[0].critmin + "-20 x" + curChar.weapons[0].critmult);
        Att1Weapon.setText(curChar.weapons[0].WeaponName);
        Att1DamageType.setText(curChar.weapons[0].damagetype1.name() + " & " + curChar.weapons[0].damagetype2.name() + "");
        Att2Label.setText("Attack 2: +" + curChar.weapons[1].attackbonus 
                + "(" + curChar.weapons[1].numAttackDice + "d" + curChar.weapons[1].dieSize + "+" + curChar.weapons[1].damagebonus + ") "
                + "crit " + curChar.weapons[1].critmin + "-20 x" + curChar.weapons[1].critmult);
        Att2Weapon.setText(curChar.weapons[1].WeaponName);
        Att2DamageType.setText(curChar.weapons[1].damagetype1.name() + " & " + curChar.weapons[1].damagetype2.name() + "");
        Att3Label.setText("Attack 3: +" + curChar.weapons[2].attackbonus 
                + "(" + curChar.weapons[2].numAttackDice + "d" + curChar.weapons[2].dieSize + "+" + curChar.weapons[2].damagebonus + ") "
                + "crit " + curChar.weapons[2].critmin + "-20 x" + curChar.weapons[2].critmult);
        Att3Weapon.setText(curChar.weapons[2].WeaponName);
        Att3DamageType.setText(curChar.weapons[2].damagetype1.name() + " & " + curChar.weapons[2].damagetype2.name() + "");
        Att4Label.setText("Attack 4: +" + curChar.weapons[3].attackbonus 
                + "(" + curChar.weapons[3].numAttackDice + "d" + curChar.weapons[3].dieSize + "+" + curChar.weapons[3].damagebonus + ") "
                + "crit " + curChar.weapons[3].critmin + "-20 x" + curChar.weapons[3].critmult);
        Att4Weapon.setText(curChar.weapons[3].WeaponName);
        Att4DamageType.setText(curChar.weapons[3].damagetype1.name() + " & " + curChar.weapons[3].damagetype2.name() + "");
   }
   private void revealClassFeatureSelectBoxes() {
	   //TODO create reveal code
        domainSelectPanel.setVisible(false);
        monkBonusFeatsPanel.setVisible(false);    
        favoredEnemyPanel.setVisible(false);
        CombatStylePanel.setVisible(false);
        rogueAbilitiesPanel.setVisible(false);
        specialistWizardBox.setVisible(false);
        for(CharAbility Ability : curChar.ClassAbilities) {
            if(Ability.getAbilityCode()==49) {
                domainSelectPanel.setVisible(true);
            }
            else if(Ability.getAbilityCode()==70) {
                monkBonusFeatsPanel.setVisible(true);
            }
            else if(Ability.getAbilityCode()==97) {
                favoredEnemyPanel.setVisible(true);
            }
            else if(Ability.getAbilityCode()==99) {
                CombatStylePanel.setVisible(true);
            }
            else if(curChar.Classes.get(9).getLevel()>=10) {
                rogueAbilitiesPanel.setVisible(true);
            }
            else if(Ability.getAbilityCode()==119) {
                specialistWizardBox.setVisible(true);
            }
        }
    }
   private int[] statsCollector() {
       int[] stats = new int[8];        try { //we want to make sure the values inserted into the character record are actually numbers
        stats[6] = Integer.parseInt(expInsertBox.getText()); //set experience points
        stats[0] = Integer.parseInt(STRInsertBox.getText()); //prepare values to be passed...
        stats[1] = Integer.parseInt(DEXInsertBox.getText()); //
        stats[2] = Integer.parseInt(CONInsertBox.getText()); //
        stats[3] = Integer.parseInt(INTInsertBox.getText()); // 
        stats[4] = Integer.parseInt(WISInsertBox.getText()); // 
        stats[5] = Integer.parseInt(CHAInsertBox.getText()); //until we have checked every box.
        stats[7] = Integer.parseInt(HPCurrentField.getText());  //this is a good time to set HPCurrent as long as we are checking for illegal arguments
        }
        catch (IllegalArgumentException b) { //if they aren't numbers, set stats to 0.
            for(int x = 0;x<stats.length;x++) { //that'll show them users for putting in illegal values
                stats[x] = 0;
            }
            //display a simple error message
            JOptionPane.showMessageDialog(this,"You entered a non-integer into either the experience points, one of the stat boxes, or your current hit points these must be integers");
        }
       return stats;
   }
   private int[] DomainsCollector() {
       int[] Domains = new int[6];
       Domains[0] = domain1ComboBox.getSelectedIndex();
       Domains[1] = domain2ComboBox.getSelectedIndex();
       Domains[2] = domain3ComboBox.getSelectedIndex();
       Domains[3] = domain4ComboBox.getSelectedIndex();
       Domains[4] = domain5ComboBox.getSelectedIndex();
       Domains[5] = domain6ComboBox.getSelectedIndex();
       return Domains;
   }
   private int[] monkFeatsCollector() {
       int[] monkFeats = new int[3];
       monkFeats[0] = monkBonusLvl1FeatBox.getSelectedIndex();
       monkFeats[1] = monkBonusLvl2FeatBox.getSelectedIndex();
       monkFeats[2] = monkBonusLvl6FeatBox.getSelectedIndex();
       return monkFeats;
   }
   private int[] favoredEnemiesCollector() {
       int[] favoredEnemiesSelected = new int[9];
       favoredEnemiesSelected[0] = FELvl1Box.getSelectedIndex();
       favoredEnemiesSelected[1] = FELvl5Box1.getSelectedIndex();
       favoredEnemiesSelected[2] = FELvl5Box2.getSelectedIndex();
       favoredEnemiesSelected[3] = FELvl10Box1.getSelectedIndex();
       favoredEnemiesSelected[4] = FELvl10Box2.getSelectedIndex();
       favoredEnemiesSelected[5] = FELvl15Box1.getSelectedIndex();
       favoredEnemiesSelected[6] = FELvl15Box2.getSelectedIndex();
       favoredEnemiesSelected[7] = FELvl20Box1.getSelectedIndex();
       favoredEnemiesSelected[8] = FELvl20Box2.getSelectedIndex();
       return favoredEnemiesSelected;
   }
   private boolean[] rogueAbilitiesCollector() {
       boolean[] rogueAbilities = new boolean[10];
       rogueAbilities[0] = rogueAbilities1.isSelected();
       rogueAbilities[1] = rogueAbilities2.isSelected();
       rogueAbilities[2] = rogueAbilities3.isSelected();
       rogueAbilities[3] = rogueAbilities4.isSelected();
       rogueAbilities[4] = rogueAbilities5.isSelected();
       rogueAbilities[5] = rogueAbilities6.isSelected();
       rogueAbilities[6] = rogueAbilities7.isSelected();
       rogueAbilities[7] = rogueAbilities8.isSelected();
       rogueAbilities[8] = rogueAbilities9.isSelected();
       rogueAbilities[9] = rogueAbilities10.isSelected();
       return rogueAbilities;
   }
   private int[] wizardSpecialtyCollector() {
       int[] wizardSpecialty = new int[3];
       wizardSpecialty[0] = SpecialtySelectBox.getSelectedIndex();
       wizardSpecialty[1] = BannedSchoolSelectBox1.getSelectedIndex();
       wizardSpecialty[2] = BannedSchoolSelectBox2.getSelectedIndex();       
       return wizardSpecialty;
   }
   private void setSkillBox() {
       String bigstring = "";
       for(int x = 0 ;x<curChar.skillNames.size();x++) {
           String abilityModStat = "STR + ";
           if(curChar.skillAttributeArray.get(x) == 1) {
               abilityModStat = "DEX + ";
           }
           else if(curChar.skillAttributeArray.get(x) == 2) {
               abilityModStat = "CON + ";
           }
           else if(curChar.skillAttributeArray.get(x) == 3) {
               abilityModStat = "INT + ";
           }
           else if(curChar.skillAttributeArray.get(x) == 4) {
               abilityModStat = "WIS + ";
           }
           else if(curChar.skillAttributeArray.get(x) == 5) {
               abilityModStat = "CHA + ";
           }
           else {}
           bigstring = bigstring + curChar.skillNames.get(x) + ": " + 
                   curChar.skillModifiers[x] + ", " + (int)curChar.skillRanks[x] + 
                   " ranks + " + curChar.skillAbilityMods[x] + " " + abilityModStat + 
                   curChar.allOtherSkillBonus[x] + " " + "\n";
           SkillInsertTable.getModel().setValueAt(curChar.skillNames.get(x), x, 0);
       }
       SkillsBox.setText(bigstring);
   
   }
   private void setFeatsBox() {
       String bigstring = "Racial Abilities \n";
       //insert race abilities text code
       for(CharAbility Ability : curChar.getRaceAbilities()) {
            if(Ability.getOverriden()==false) {
            bigstring = bigstring + Ability.getAbilityName() + ": " + Ability.getAbilityText() + "\n \n";
           }
       }
       bigstring = bigstring + " \n Class Abilities \n";
       for(CharAbility Ability : curChar.getClassAbilities()) {
           if(Ability.getOverriden()==false) {
                bigstring = bigstring + Ability.getAbilityName() + ": " + Ability.getAbilityText() + "\n \n";
            //TextIO.put(Ability.getAbilityName());
           }
       }
       bigstring = bigstring + "\n Feats \n";
       //insert feats text code
       for(CharAbility Ability : curChar.getFeats()) {
           if(Ability.getOverriden()==false) {
           bigstring = bigstring + Ability.getAbilityName() + ": " + Ability.getAbilityText() + "\n \n";
           //TextIO.put(Ability.getAbilityName());
           }
       }
       FeatsBox.setText(bigstring);
   }
   class FeatTableModel extends DefaultTableModel {
       /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	@Override
       public boolean isCellEditable(int row, int col) {
           if(col!=1) {
               return false;
           }
           return true;
       }
       @Override
       public Class<? extends Object> getColumnClass(int c) {
           return getValueAt(0,c).getClass();
       }
       public void setColumnIdentifiers(Integer[] columnIdentifiers) {
           super.setColumnIdentifiers(convertToVector(columnIdentifiers));
       }
       public FeatTableModel() {
           this(1,1);
           String empty = "";
           this.setValueAt(empty, 0, 0);
       }
       public FeatTableModel(Vector<Vector<String>> data, Vector<String> columnNames) 
       {
            setDataVector(data, columnNames);
       }
       @SuppressWarnings("unchecked")
	public FeatTableModel(Object[][] data, Object[] columnNames) 
       {
            this(convertToVector(data), convertToVector(columnNames));
       }
       public FeatTableModel(int numRows, int numColumns) 
       {
           Vector<String> defaultNames = new Vector<String>(numColumns);
           Vector<Vector<String>> data = new Vector<Vector<String>>(numRows);
           for (int i = 0; i < numColumns; i++) 
           {
               defaultNames.add(super.getColumnName(i));
           }          
           for (int r = 0; r < numRows; r++) 
           {
               Vector<String> tmp = new Vector<>(numColumns);
               tmp.setSize(numColumns);
               data.add(tmp);
           }
           setDataVector(data, defaultNames);
       }
   }
   class SkillTableModel extends DefaultTableModel {
       /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	@Override
       public boolean isCellEditable(int row, int col) {
           if(col<1 || col>curChar.level) {
               return false;
           }
           else {
                return true;
           }
       }
       @Override
       public Class<? extends Object> getColumnClass(int c) {
            return getValueAt(0, c).getClass();
       }
       public SkillTableModel(Vector<Vector<String>> data, Vector<String> columnNames) 
       {
            setDataVector(data, columnNames);
       }
       @SuppressWarnings("unchecked")
	public SkillTableModel(Object[][] data, Object[] columnNames) 
       {
            this(convertToVector(data), convertToVector(columnNames));
       }
       public SkillTableModel(int numRows, int numColumns) 
       {
           Vector<String> defaultNames = new Vector<>(numColumns);
           Vector<Vector<String>> data = new Vector<>(numRows);
           for (int i = 0; i < numColumns; i++) 
           {
               defaultNames.add(super.getColumnName(i));
           }          
           for (int r = 0; r < numRows; r++) 
           {
               Vector<String> tmp = new Vector<String>(numColumns);
               tmp.setSize(numColumns);
               data.add(tmp);
           }
           setDataVector(data, defaultNames);
       }
       
   }
   class inClassRenderer extends DefaultTableCellRenderer {
        /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	// This method is called each time a cell in a column
        // using this renderer needs to be rendered.
       @Override
       public Component getTableCellRendererComponent(
                            JTable table, Object value,
                            boolean isSelected, boolean hasFocus,
                            int row, int column) {
           setValue(value);
           setOpaque(true);
            if (isSelected) {
                setBackground(Color.LIGHT_GRAY);
                setForeground(Color.BLACK);
            } else {
                setBackground(Color.white);
                setForeground(Color.BLACK);
            }
        return this;
    }
}

   class nonClassRenderer extends DefaultTableCellRenderer {
        /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	// This method is called each time a cell in a column
        // using this renderer needs to be rendered.
       @Override
       public Component getTableCellRendererComponent(
                            JTable table, Object value,
                            boolean isSelected, boolean hasFocus,
                            int row, int column) {
           setValue(value);
           setOpaque(true);
           
            if (isSelected) {
                setBackground(Color.yellow);
            } else {
                setBackground(Color.cyan);
            }
            setForeground(Color.BLACK);
        return this;
    }
}
public void setSkillTableWidths() {
    TableColumn column = null;
    for(int i = 0; i<SkillInsertTable.getColumnCount(); i++) {
        column = SkillInsertTable.getColumnModel().getColumn(i);
        if(i==0) {
            column.setPreferredWidth(150);
        }
        else {
            column.setPreferredWidth(30);
        }
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DDGameGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DDGameGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DDGameGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DDGameGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        String fileToCompile = "CharAbility.java";
        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
        int compilationResult = compiler.run(null, null, null, fileToCompile);
        if(compilationResult == 0){
            System.out.println("Compilation is successful");
        }else{
            System.out.println("Compilation Failed");
        }
        fileToCompile = "Domains.java";
        compilationResult = compiler.run(null, null, null, fileToCompile);
        if(compilationResult == 0){
            System.out.println("Compilation is successful");
        }else{
            System.out.println("Compilation Failed");
        }
        fileToCompile = "Enchantment.java";
        compilationResult = compiler.run(null, null, null, fileToCompile);
        if(compilationResult == 0){
            System.out.println("Compilation is successful");
        }else{
            System.out.println("Compilation Failed");
        }
        try {
            if(args[0].equals("debug=true")) {
                debug = true;
            }
        }
        catch(ArrayIndexOutOfBoundsException x) {
            debug = false;
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new DDGameGui().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ACLabel;
    private javax.swing.JPanel ACPanel;
    private javax.swing.JPanel AbilitiesPanel;
    private javax.swing.JLabel ArmorAttackLabel;
    private javax.swing.JComboBox ArmorAttackSelectBox;
    private javax.swing.JLabel ArmorEnch1Label;
    private javax.swing.JComboBox ArmorEnch1SelectBox;
    private javax.swing.JLabel ArmorEnch2Label;
    private javax.swing.JComboBox ArmorEnch2SelectBox;
    private javax.swing.JLabel ArmorEnch3Label;
    private javax.swing.JComboBox ArmorEnch3SelectBox;
    private javax.swing.JLabel ArmorEnhancementLabel;
    private javax.swing.JComboBox ArmorEnhancementSelectBox;
    private javax.swing.JLabel ArmorInputLabel;
    private javax.swing.JLabel ArmorMaterialLabel;
    private javax.swing.JComboBox ArmorMaterialSelectBox;
    private javax.swing.JPanel ArmorPanel;
    private javax.swing.JLabel ArmorPriceDisplayLabel;
    private javax.swing.JLabel ArmorPriceLabel;
    private javax.swing.JComboBox ArmorSelectBox;
    private javax.swing.JLabel Att1DamageType;
    private javax.swing.JLabel Att1Label;
    private javax.swing.JLabel Att1Weapon;
    private javax.swing.JLabel Att2DamageType;
    private javax.swing.JLabel Att2Label;
    private javax.swing.JLabel Att2Weapon;
    private javax.swing.JLabel Att3DamageType;
    private javax.swing.JLabel Att3Label;
    private javax.swing.JLabel Att3Weapon;
    private javax.swing.JLabel Att4DamageType;
    private javax.swing.JLabel Att4Label;
    private javax.swing.JLabel Att4Weapon;
    private javax.swing.JScrollPane AttackListScroller;
    private javax.swing.JPanel AttacksPane;
    private javax.swing.JPanel AttacksPanel;
    private javax.swing.JLabel BABLabel;
    private javax.swing.JLabel BannedLabel1;
    private javax.swing.JLabel BannedLabel2;
    private javax.swing.JComboBox BannedSchoolSelectBox1;
    private javax.swing.JComboBox BannedSchoolSelectBox2;
    private javax.swing.JPanel BasicsPanel;
    private javax.swing.JLabel BullrushLabel;
    private javax.swing.JTextField CHAInsertBox;
    private javax.swing.JLabel CHAInsertBoxLabel;
    protected javax.swing.JLabel CHALabel;
    private javax.swing.JTextField CONInsertBox;
    private javax.swing.JLabel CONInsertBoxLabel;
    protected javax.swing.JLabel CONLabel;
    private javax.swing.JPanel ClassAbilitiesPanel;
    private javax.swing.JScrollPane ClassAbilitiesScroller;
    private javax.swing.JLabel ClassLabel;
    private javax.swing.JButton ClassSelectButton;
    private javax.swing.JComboBox CombatStyleBox;
    private javax.swing.JLabel CombatStyleLabel;
    private javax.swing.JPanel CombatStylePanel;
    private javax.swing.JButton CustomSkillButton;
    private javax.swing.JTextField DEXInsertBox;
    private javax.swing.JLabel DEXInsertBoxLabel;
    protected javax.swing.JLabel DEXLabel;
    private javax.swing.JComboBox FELvl10Box1;
    private javax.swing.JComboBox FELvl10Box2;
    private javax.swing.JLabel FELvl10Label;
    private javax.swing.JComboBox FELvl15Box1;
    private javax.swing.JComboBox FELvl15Box2;
    private javax.swing.JLabel FELvl15Label;
    private javax.swing.JComboBox FELvl1Box;
    private javax.swing.JLabel FELvl1Label;
    private javax.swing.JComboBox FELvl20Box1;
    private javax.swing.JComboBox FELvl20Box2;
    private javax.swing.JLabel FELvl20Label;
    private javax.swing.JComboBox FELvl5Box1;
    private javax.swing.JComboBox FELvl5Box2;
    private javax.swing.JLabel FELvl5Label;
    private javax.swing.JTextArea FeatsBox;
    private javax.swing.JScrollPane FeatsDisplayPane;
    private javax.swing.JLabel FeatsLabel;
    private javax.swing.JTable FeatsTable;
    private javax.swing.JLabel FlatFootedACLabel;
    private javax.swing.JLabel FortLabel;
    private javax.swing.JComboBox GenderBox;
    private javax.swing.JLabel GenderLabel;
    private javax.swing.JLabel GrappleLabel;
    private javax.swing.JTextField HPCurrentField;
    private javax.swing.JLabel HPLabel;
    private javax.swing.JLabel HPMaxLabel;
    private javax.swing.JPanel HPPanel;
    private javax.swing.JLabel HeavyLoadLabel;
    private javax.swing.JTextField INTInsertBox;
    private javax.swing.JLabel INTInsertBoxLabel;
    protected javax.swing.JLabel INTLabel;
    private javax.swing.JPanel InsertStatBox;
    private javax.swing.JTable ItemTable;
    private javax.swing.JTextArea LanguageInsertArea;
    private javax.swing.JScrollPane LanguageInsertScroller;
    private javax.swing.JTextArea LanguagesKnown;
    private javax.swing.JScrollPane LanguagesKnownScroll;
    private javax.swing.JLabel LanguagesLabel;
    private javax.swing.JPanel LeftSideSuperPanel;
    private javax.swing.JPanel LevelPanel;
    private javax.swing.JLabel LevelUpLabel;
    private javax.swing.JLabel LightLoadLabel;
    private javax.swing.JLabel MediumLoadLabel;
    private javax.swing.JLabel MeleeAttackLabel;
    private javax.swing.JLabel OverrunLabel;
    private javax.swing.JLabel RaceLabel;
    private javax.swing.JComboBox RaceSelector;
    private javax.swing.JLabel RangeAttackLabel;
    private javax.swing.JLabel ReflexLabel;
    private javax.swing.JLabel RogueAbilitiesLabel;
    private javax.swing.JTextField STRInsertBox;
    private javax.swing.JLabel STRInsertBoxLabel;
    protected javax.swing.JLabel STRLabel;
    private javax.swing.JPanel SavesPanel;
    private javax.swing.JLabel ShieldAttackLabel;
    private javax.swing.JComboBox ShieldAttackSelectBox;
    private javax.swing.JLabel ShieldEnch1Label;
    private javax.swing.JComboBox ShieldEnch1SelectBox;
    private javax.swing.JLabel ShieldEnch2Label;
    private javax.swing.JComboBox ShieldEnch2SelectBox;
    private javax.swing.JLabel ShieldEnch3Label;
    private javax.swing.JComboBox ShieldEnch3SelectBox;
    private javax.swing.JLabel ShieldEnhancementLabel;
    private javax.swing.JComboBox ShieldEnhancementSelectBox;
    private javax.swing.JLabel ShieldLabel;
    private javax.swing.JLabel ShieldMaterialLabel;
    private javax.swing.JComboBox ShieldMaterialSelectBox;
    private javax.swing.JPanel ShieldPanel;
    private javax.swing.JLabel ShieldPriceDisplayLabel;
    private javax.swing.JLabel ShieldPriceLabel;
    private javax.swing.JComboBox ShieldSelectBox;
    private javax.swing.JScrollPane SkillInsertScrollPane;
    private javax.swing.JTable SkillInsertTable;
    private javax.swing.JPanel SkillSheet;
    private javax.swing.JTextArea SkillsBox;
    private javax.swing.JScrollPane SkillsDisplayPane;
    private javax.swing.JLabel SkillsLabel;
    private javax.swing.JLabel SpecialistWizardLabel;
    private javax.swing.JLabel SpecialtyLabel;
    private javax.swing.JComboBox SpecialtySelectBox;
    private javax.swing.JLabel SpeedLabel;
    private javax.swing.JPanel StatBox;
    protected javax.swing.JLabel StatLabel;
    private javax.swing.JPanel TopMiddleSuperPanel;
    private javax.swing.JLabel TouchACLabel;
    private javax.swing.JLabel TripLabel;
    private javax.swing.JTextField WISInsertBox;
    private javax.swing.JLabel WISInsertBoxLabel;
    protected javax.swing.JLabel WISLabel;
    private javax.swing.JLabel WeaponEnch1Label;
    private javax.swing.JLabel WeaponEnch1Label1;
    private javax.swing.JLabel WeaponEnch1Label2;
    private javax.swing.JLabel WeaponEnch1Label3;
    private javax.swing.JComboBox WeaponEnch1SelectBox;
    private javax.swing.JComboBox WeaponEnch1SelectBox1;
    private javax.swing.JComboBox WeaponEnch1SelectBox2;
    private javax.swing.JComboBox WeaponEnch1SelectBox3;
    private javax.swing.JLabel WeaponEnch2Label;
    private javax.swing.JLabel WeaponEnch2Label1;
    private javax.swing.JLabel WeaponEnch2Label2;
    private javax.swing.JLabel WeaponEnch2Label3;
    private javax.swing.JComboBox WeaponEnch2SelectBox;
    private javax.swing.JComboBox WeaponEnch2SelectBox1;
    private javax.swing.JComboBox WeaponEnch2SelectBox2;
    private javax.swing.JComboBox WeaponEnch2SelectBox3;
    private javax.swing.JLabel WeaponEnch3Label;
    private javax.swing.JLabel WeaponEnch3Label1;
    private javax.swing.JLabel WeaponEnch3Label2;
    private javax.swing.JLabel WeaponEnch3Label3;
    private javax.swing.JComboBox WeaponEnch3SelectBox;
    private javax.swing.JComboBox WeaponEnch3SelectBox1;
    private javax.swing.JComboBox WeaponEnch3SelectBox2;
    private javax.swing.JComboBox WeaponEnch3SelectBox3;
    private javax.swing.JLabel WeaponEnhancementLabel;
    private javax.swing.JLabel WeaponEnhancementLabel1;
    private javax.swing.JLabel WeaponEnhancementLabel2;
    private javax.swing.JLabel WeaponEnhancementLabel3;
    private javax.swing.JComboBox WeaponEnhancementSelectBox;
    private javax.swing.JComboBox WeaponEnhancementSelectBox1;
    private javax.swing.JComboBox WeaponEnhancementSelectBox2;
    private javax.swing.JComboBox WeaponEnhancementSelectBox3;
    private javax.swing.JLabel WeaponInputLabel;
    private javax.swing.JLabel WeaponInputLabel1;
    private javax.swing.JLabel WeaponInputLabel2;
    private javax.swing.JLabel WeaponInputLabel3;
    private javax.swing.JLabel WeaponMaterialLabel;
    private javax.swing.JLabel WeaponMaterialLabel1;
    private javax.swing.JLabel WeaponMaterialLabel2;
    private javax.swing.JLabel WeaponMaterialLabel3;
    private javax.swing.JComboBox WeaponMaterialSelectBox;
    private javax.swing.JComboBox WeaponMaterialSelectBox1;
    private javax.swing.JComboBox WeaponMaterialSelectBox2;
    private javax.swing.JComboBox WeaponMaterialSelectBox3;
    private javax.swing.JPanel WeaponPanel;
    private javax.swing.JPanel WeaponPanel1;
    private javax.swing.JPanel WeaponPanel2;
    private javax.swing.JPanel WeaponPanel3;
    private javax.swing.JLabel WeaponPriceDisplayLabel;
    private javax.swing.JLabel WeaponPriceDisplayLabel1;
    private javax.swing.JLabel WeaponPriceDisplayLabel2;
    private javax.swing.JLabel WeaponPriceDisplayLabel3;
    private javax.swing.JLabel WeaponPriceLabel;
    private javax.swing.JLabel WeaponPriceLabel1;
    private javax.swing.JLabel WeaponPriceLabel2;
    private javax.swing.JLabel WeaponPriceLabel3;
    private javax.swing.JComboBox WeaponSelectBox;
    private javax.swing.JComboBox WeaponSelectBox1;
    private javax.swing.JComboBox WeaponSelectBox2;
    private javax.swing.JComboBox WeaponSelectBox3;
    private javax.swing.JLabel WeaponSizeLabel;
    private javax.swing.JLabel WeaponSizeLabel1;
    private javax.swing.JLabel WeaponSizeLabel2;
    private javax.swing.JLabel WeaponSizeLabel3;
    private javax.swing.JComboBox WeaponSizeSelectBox;
    private javax.swing.JComboBox WeaponSizeSelectBox1;
    private javax.swing.JComboBox WeaponSizeSelectBox2;
    private javax.swing.JComboBox WeaponSizeSelectBox3;
    private javax.swing.JLabel WeightLabel;
    private javax.swing.JPanel WeightPanel;
    private javax.swing.JLabel WillLabel;
    private javax.swing.JPanel buffSheet;
    public javax.swing.JTextField charNameInsertBox;
    private javax.swing.JLabel charNameInsertBoxLabel;
    protected javax.swing.JLabel charNameLabel;
    private javax.swing.JPanel charSheet;
    private javax.swing.JTabbedPane ddGameTabs;
    private javax.swing.JComboBox domain1ComboBox;
    private javax.swing.JComboBox domain2ComboBox;
    private javax.swing.JComboBox domain3ComboBox;
    private javax.swing.JComboBox domain4ComboBox;
    private javax.swing.JComboBox domain5ComboBox;
    private javax.swing.JComboBox domain6ComboBox;
    private javax.swing.JLabel domainSelectLabel;
    private javax.swing.JPanel domainSelectPanel;
    private javax.swing.JPanel editSheet;
    private javax.swing.JTextField expInsertBox;
    private javax.swing.JLabel expInsertBoxLabel;
    protected javax.swing.JLabel expLabel;
    private javax.swing.JLabel favoredEnemyLabel;
    private javax.swing.JPanel favoredEnemyPanel;
    private javax.swing.JPanel featSheet;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel languageInsertLabel;
    protected javax.swing.JLabel levelLabel;
    private javax.swing.JButton loadButton;
    private javax.swing.JLabel monkBonusFeatsLabel;
    private javax.swing.JPanel monkBonusFeatsPanel;
    private javax.swing.JComboBox monkBonusLvl1FeatBox;
    private javax.swing.JLabel monkBonusLvl1Label;
    private javax.swing.JComboBox monkBonusLvl2FeatBox;
    private javax.swing.JLabel monkBonusLvl2Label;
    private javax.swing.JComboBox monkBonusLvl6FeatBox;
    private javax.swing.JLabel monkBonusLvl6Label;
    private javax.swing.JCheckBox rogueAbilities1;
    private javax.swing.JCheckBox rogueAbilities10;
    private javax.swing.JCheckBox rogueAbilities2;
    private javax.swing.JCheckBox rogueAbilities3;
    private javax.swing.JCheckBox rogueAbilities4;
    private javax.swing.JCheckBox rogueAbilities5;
    private javax.swing.JCheckBox rogueAbilities6;
    private javax.swing.JCheckBox rogueAbilities7;
    private javax.swing.JCheckBox rogueAbilities8;
    private javax.swing.JCheckBox rogueAbilities9;
    private javax.swing.JPanel rogueAbilitiesPanel;
    private javax.swing.JButton saveButton;
    private javax.swing.JPanel specialistWizardBox;
    private javax.swing.JPanel spellSheet;
    private javax.swing.JPanel weaponsAndArmorSheet;
    // End of variables declaration//GEN-END:variables
    public PlayerChar curChar = new PlayerChar();
    public DefaultComboBoxModel<String> raceNamesList = new DefaultComboBoxModel<>(CharRace.getRaceNamesStringArray());
    public DefaultComboBoxModel<String> domainNamesList = new DefaultComboBoxModel<>(Domain.getDomainNamesListArray());
    public DefaultComboBoxModel<String> favoredEnemyList1 = new DefaultComboBoxModel<>(CharAbility.getFavoredEnemyListArray());
    public DefaultComboBoxModel<String> favoredEnemyList2 = new DefaultComboBoxModel<>(CharAbility.getFavoredEnemyListArray());
    public DefaultComboBoxModel<String> favoredEnemyList3 = new DefaultComboBoxModel<>(CharAbility.getFavoredEnemyListArray());
    public DefaultComboBoxModel<String> favoredEnemyList4 = new DefaultComboBoxModel<>(CharAbility.getFavoredEnemyListArray());
    public DefaultComboBoxModel<String> favoredEnemyList5 = new DefaultComboBoxModel<>(CharAbility.getFavoredEnemyListArray());
    public DefaultComboBoxModel<String> favoredEnemyList2b = new DefaultComboBoxModel<>(CharAbility.getFavoredEnemyListArray());
    public DefaultComboBoxModel<String> favoredEnemyList3b = new DefaultComboBoxModel<>(CharAbility.getFavoredEnemyListArray());
    public DefaultComboBoxModel<String> favoredEnemyList4b = new DefaultComboBoxModel<>(CharAbility.getFavoredEnemyListArray());
    public DefaultComboBoxModel<String> favoredEnemyList5b = new DefaultComboBoxModel<>(CharAbility.getFavoredEnemyListArray());
    public DefaultComboBoxModel<String> armorNamesList = new DefaultComboBoxModel<>(Armor.getArmorNameListArray());
    public DefaultComboBoxModel<Armor.Enhancement> armorEnhancementList = new DefaultComboBoxModel<>(Armor.Enhancement.values());
    public DefaultComboBoxModel<Armor.ArmorMaterial> armorMaterialList = new DefaultComboBoxModel<>(Armor.ArmorMaterial.values());
    public DefaultComboBoxModel<String> armorEnchantmentList1 = new DefaultComboBoxModel<>(Enchantment.getArmorEnchantmentNames());
    public DefaultComboBoxModel<String> armorEnchantmentList2 = new DefaultComboBoxModel<>(Enchantment.getArmorEnchantmentNames());
    public DefaultComboBoxModel<String> armorEnchantmentList3 = new DefaultComboBoxModel<>(Enchantment.getArmorEnchantmentNames());
    public DefaultComboBoxModel<Armor.ArmorAttack> armorAttackList = new DefaultComboBoxModel<>(Armor.ArmorAttack.values());
    public DefaultComboBoxModel<String> shieldNamesList = new DefaultComboBoxModel<>(Armor.getShieldNameListArray());
    public DefaultComboBoxModel<Armor.Enhancement> shieldEnhancementList = new DefaultComboBoxModel<>(Armor.Enhancement.values());
    public DefaultComboBoxModel<Armor.ArmorMaterial> shieldMaterialList = new DefaultComboBoxModel<>(Armor.ArmorMaterial.values());
    public DefaultComboBoxModel<String> shieldEnchantmentList1 = new DefaultComboBoxModel<>(Enchantment.getShieldEnchantmentNames());
    public DefaultComboBoxModel<String> shieldEnchantmentList2 = new DefaultComboBoxModel<>(Enchantment.getShieldEnchantmentNames());
    public DefaultComboBoxModel<String> shieldEnchantmentList3 = new DefaultComboBoxModel<>(Enchantment.getShieldEnchantmentNames());
    public DefaultComboBoxModel<Armor.ArmorAttack> shieldAttackList = new DefaultComboBoxModel<>(Armor.ArmorAttack.values());
    public DefaultComboBoxModel<String> weaponNamesList1 = new DefaultComboBoxModel<>(Weapon.getWeaponNames());
    public DefaultComboBoxModel<Weapon.Enhancement> weaponEnhancementList1 = new DefaultComboBoxModel<>(Weapon.Enhancement.values());
    public DefaultComboBoxModel<Weapon.WeaponMaterial> weaponMaterialList1 = new DefaultComboBoxModel<>(Weapon.WeaponMaterial.values());
    public DefaultComboBoxModel<Weapon.Size> weaponSizeList1 = new DefaultComboBoxModel<>(Weapon.Size.values());
    public DefaultComboBoxModel<String> weapon1EnchantmentList1 = new DefaultComboBoxModel<>(Enchantment.getMeleeEnchantmentNames());
    public DefaultComboBoxModel<String> weapon1EnchantmentList2 = new DefaultComboBoxModel<>(Enchantment.getMeleeEnchantmentNames());
    public DefaultComboBoxModel<String> weapon1EnchantmentList3 = new DefaultComboBoxModel<>(Enchantment.getMeleeEnchantmentNames());
    public DefaultComboBoxModel<String> weaponNamesList2 = new DefaultComboBoxModel<>(Weapon.getWeaponNames());
    public DefaultComboBoxModel<Weapon.Enhancement> weaponEnhancementList2 = new DefaultComboBoxModel<>(Weapon.Enhancement.values());
    public DefaultComboBoxModel<Weapon.WeaponMaterial> weaponMaterialList2 = new DefaultComboBoxModel<>(Weapon.WeaponMaterial.values());
    public DefaultComboBoxModel<Weapon.Size> weaponSizeList2 = new DefaultComboBoxModel<>(Weapon.Size.values());
    public DefaultComboBoxModel<String> weapon2EnchantmentList1 = new DefaultComboBoxModel<>(Enchantment.getMeleeEnchantmentNames());
    public DefaultComboBoxModel<String> weapon2EnchantmentList2 = new DefaultComboBoxModel<>(Enchantment.getMeleeEnchantmentNames());
    public DefaultComboBoxModel<String> weapon2EnchantmentList3 = new DefaultComboBoxModel<>(Enchantment.getMeleeEnchantmentNames());
    public DefaultComboBoxModel<String> weaponNamesList3 = new DefaultComboBoxModel<>(Weapon.getWeaponNames());
    public DefaultComboBoxModel<Weapon.Enhancement> weaponEnhancementList3 = new DefaultComboBoxModel<>(Weapon.Enhancement.values());
    public DefaultComboBoxModel<Weapon.WeaponMaterial> weaponMaterialList3 = new DefaultComboBoxModel<>(Weapon.WeaponMaterial.values());
    public DefaultComboBoxModel<Weapon.Size> weaponSizeList3 = new DefaultComboBoxModel<>(Weapon.Size.values());
    public DefaultComboBoxModel<String> weapon3EnchantmentList1 = new DefaultComboBoxModel<>(Enchantment.getMeleeEnchantmentNames());
    public DefaultComboBoxModel<String> weapon3EnchantmentList2 = new DefaultComboBoxModel<>(Enchantment.getMeleeEnchantmentNames());
    public DefaultComboBoxModel<String> weapon3EnchantmentList3 = new DefaultComboBoxModel<>(Enchantment.getMeleeEnchantmentNames());
    public DefaultComboBoxModel<String> weaponNamesList4 = new DefaultComboBoxModel<>(Weapon.getWeaponNames());
    public DefaultComboBoxModel<Weapon.Enhancement> weaponEnhancementList4 = new DefaultComboBoxModel<>(Weapon.Enhancement.values());
    public DefaultComboBoxModel<Weapon.WeaponMaterial> weaponMaterialList4 = new DefaultComboBoxModel<>(Weapon.WeaponMaterial.values());
    public DefaultComboBoxModel<Weapon.Size> weaponSizeList4 = new DefaultComboBoxModel<>(Weapon.Size.values());
    public DefaultComboBoxModel<String> weapon4EnchantmentList1 = new DefaultComboBoxModel<>(Enchantment.getMeleeEnchantmentNames());
    public DefaultComboBoxModel<String> weapon4EnchantmentList2 = new DefaultComboBoxModel<>(Enchantment.getMeleeEnchantmentNames());
    public DefaultComboBoxModel<String> weapon4EnchantmentList3 = new DefaultComboBoxModel<>(Enchantment.getMeleeEnchantmentNames());
    public static boolean debug = false;
}

